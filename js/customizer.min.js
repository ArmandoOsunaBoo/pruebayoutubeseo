(()=>{"use strict";const e=function(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)},t=function(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)},o=function(o,n){return function(s,i,r){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;const c=o[n];if(!t(s))return;if(!e(i))return;if("function"!=typeof r)return void console.error("The hook callback must be a function.");if("number"!=typeof a)return void console.error("If specified, the hook priority must be a number.");const l={callback:r,priority:a,namespace:i};if(c[s]){const e=c[s].handlers;let t;for(t=e.length;t>0&&!(a>=e[t-1].priority);t--);t===e.length?e[t]=l:e.splice(t,0,l),c.__current.forEach((e=>{e.name===s&&e.currentIndex>=t&&e.currentIndex++}))}else c[s]={handlers:[l],runs:0};"hookAdded"!==s&&o.doAction("hookAdded",s,i,r,a)}},n=function(o,n){let s=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(i,r){const a=o[n];if(!t(i))return;if(!s&&!e(r))return;if(!a[i])return 0;let c=0;if(s)c=a[i].handlers.length,a[i]={runs:a[i].runs,handlers:[]};else{const e=a[i].handlers;for(let t=e.length-1;t>=0;t--)e[t].namespace===r&&(e.splice(t,1),c++,a.__current.forEach((e=>{e.name===i&&e.currentIndex>=t&&e.currentIndex--})))}return"hookRemoved"!==i&&o.doAction("hookRemoved",i,r),c}},s=function(e,t){return function(o,n){const s=e[t];return void 0!==n?o in s&&s[o].handlers.some((e=>e.namespace===n)):o in s}},i=function(e,t){let o=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(n){const s=e[t];s[n]||(s[n]={handlers:[],runs:0}),s[n].runs++;const i=s[n].handlers;for(var r=arguments.length,a=new Array(r>1?r-1:0),c=1;c<r;c++)a[c-1]=arguments[c];if(!i||!i.length)return o?a[0]:void 0;const l={name:n,currentIndex:0};for(s.__current.push(l);l.currentIndex<i.length;){const e=i[l.currentIndex].callback.apply(null,a);o&&(a[0]=e),l.currentIndex++}return s.__current.pop(),o?a[0]:void 0}},r=function(e,t){return function(){var o,n;const s=e[t];return null!==(o=null===(n=s.__current[s.__current.length-1])||void 0===n?void 0:n.name)&&void 0!==o?o:null}},a=function(e,t){return function(o){const n=e[t];return void 0===o?void 0!==n.__current[0]:!!n.__current[0]&&o===n.__current[0].name}},c=function(e,o){return function(n){const s=e[o];if(t(n))return s[n]&&s[n].runs?s[n].runs:0}};class l{constructor(){this.actions=Object.create(null),this.actions.__current=[],this.filters=Object.create(null),this.filters.__current=[],this.addAction=o(this,"actions"),this.addFilter=o(this,"filters"),this.removeAction=n(this,"actions"),this.removeFilter=n(this,"filters"),this.hasAction=s(this,"actions"),this.hasFilter=s(this,"filters"),this.removeAllActions=n(this,"actions",!0),this.removeAllFilters=n(this,"filters",!0),this.doAction=i(this,"actions"),this.applyFilters=i(this,"filters",!0),this.currentAction=r(this,"actions"),this.currentFilter=r(this,"filters"),this.doingAction=a(this,"actions"),this.doingFilter=a(this,"filters"),this.didAction=c(this,"actions"),this.didFilter=c(this,"filters")}}const u=new l,{addAction:d,addFilter:h,removeAction:f,removeFilter:m,hasAction:g,hasFilter:p,removeAllActions:b,removeAllFilters:y,doAction:v,applyFilters:_,currentAction:F,currentFilter:S,doingAction:w,doingFilter:A,didAction:z,didFilter:D,actions:P,filters:k}=u;function x(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function C(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?x(Object(o),!0).forEach((function(t){I(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):x(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function I(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}SB_Customizer.initPromise=new Promise((function(e){var t;SB_Customizer.extraData=C(C({},SB_Customizer.extraData),{},{allFeedsScreen:sbc_builder.allFeedsScreen,feedsList:sbc_builder.feeds,legacyFeedsList:sbc_builder.legacyFeeds,tooltipContent:sbc_builder.feedtypesTooltipContent,feedSettingsDomOptions:null,selectedFeedModel:{channel:sbc_builder.prefilledChannelId,playlist:"",favorites:sbc_builder.prefilledChannelId,search:"",live:sbc_builder.prefilledChannelId,single:"",apiKey:"",accessToken:""},youtubeAccountConnectURL:sbc_builder.youtubeAccountConnectURL,prefilledChannelId:sbc_builder.prefilledChannelId,dismissLite:sbc_builder.youtube_feed_dismiss_lite,shouldShowFeedAPIForm:!1,shouldShowManualConnect:!1}),SB_Customizer.extraMethods=C(C({},SB_Customizer.extraMethods),{},(t={changeSettingValue:function(e,t){var o=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=this;o&&(s.customizerFeedData.settings[e]=t),!1!==n&&s.customizerControlAjaxAction(n,e),s.regenerateLayout(e)},checkExtensionActive:function(e){return this.activeExtensions[e]},shouldShowOverlay:function(e){var t=this;return(!t.sbyIsPro||t.sbyLicenseNoticeActive)&&null!=e.checkExtensionPopup||(null!=e.condition||null!=e.checkExtension||null!=e.checkExtensionDimmed)&&!t.checkControlCondition(e.condition,e.checkExtension,e.checkExtensionDimmed)},shouldShowTogglesetCover:function(e){var t=this;return!(t.sbyIsPro&&!t.sbyLicenseNoticeActive||null==e.checkExtension||t.checkExtensionActive(e.checkExtension))},togglesetExtPopup:function(e){this.viewsActive.extensionsPopupElement=e.checkExtension},regenerateLayout:function(e){var t=this;["layout","carouselarrows","carouselpag","carouselautoplay","carouseltime","carouselloop","carouselrows","cols","colstablet","colsmobile","imagepadding"].includes(e)&&setTimeout((function(){t.setShortcodeGlobalSettings(!0)}),200)},backToAllFeeds:function(){var e=this;JSON.stringify(e.customizerFeedDataInitial)===JSON.stringify(e.customizerFeedData)?window.location=e.builderUrl:e.openDialogBox("backAllToFeed")},openDialogBox:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=this,n=o.dialogBoxPopupScreen[e].heading,s=o.dialogBoxPopupScreen[e].description,i=o.dialogBoxPopupScreen[e].customButtons;"deleteSingleFeed"===e&&(o.feedToDelete=t,n=n.replace("#",o.feedToDelete.feed_name)),o.dialogBox={active:!0,type:e,heading:n,description:s,customButtons:i},window.event.stopPropagation()},confirmDialogAction:function(){var e=this;switch(e.dialogBox.type){case"deleteSingleFeed":e.feedActionDelete([e.feedToDelete.id]);break;case"deleteMultipleFeeds":e.feedActionDelete(e.feedsSelected);break;case"backAllToFeed":window.location=e.builderUrl}},feedActionDelete:function(e){var t=this,o={action:"sby_feed_saver_manager_delete_feeds",feeds_ids:e};t.ajaxPost(o,(function(e){var o=e.data;t.feedsList=Object.values(Object.assign({},o)),t.feedsSelected=[]}))},showColorPickerPospup:function(e){this.customizerScreens.activeColorPicker=e},hideColorPickerPopup:function(){this.customizerScreens.activeColorPicker=null},getPaletteClass:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=this,o=t.customizerFeedData.settings.colorpalette;if(t.checkNotEmpty(o)){var n="custom"===o?"_"+t.customizerFeedData.feed_info.id:"";return console.log("inherit"!==o?" sby"+e+"_palette_"+o+n:""),"inherit"!==o?" sby"+e+"_palette_"+o+n:""}return""},checkNotEmpty:function(e){return null!=e&&""!=e.replace(/ /gi,"")},getFeedContainerClasses:function(){var e=this;return["sb_youtube","sby_layout_"+e.customizerFeedData.settings.layout,"sby_col_"+e.getColSettings(),"sby_mob_col_"+e.getMobColSettings(),"sby_palette_"+e.getColorPaletteClass()].join(" ")},getColorPaletteClass:function(){var e=this;return"custom"==e.customizerFeedData.settings.colorpalette?e.customizerFeedData.settings.colorpalette+"_"+e.customizerFeedData.feed_info.id:e.customizerFeedData.settings.colorpalette},getColSettings:function(){var e=this;return"list"==e.customizerFeedData.settings.layout||"mobile"===e.customizerScreens.previewScreen?0:e.customizerFeedData.settings.cols?e.customizerFeedData.settings.cols:0},getMobColSettings:function(){var e=this;return"list"==e.customizerFeedData.settings.layout?0:e.customizerFeedData.settings.colsmobile?e.customizerFeedData.settings.colsmobile:0},checkShouldShowSubscribers:function(){return 1==this.customizerFeedData.settings.showsubscribe?"shown":""},shouldShowIndividualElements:function(e){return console.log(e),!1},valueIsEnabled:function(e){return 1==e||1==e||"true"==e||"on"==e},changeSwitcherSettingValue:function(e,t,o){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4?arguments[4]:void 0,i=this;console.log(s),Object.keys(i.inActiveExtensions).includes(e)&&(i.viewsActive.extensionsPopupElement=i.inActiveExtensions[e]),i.customizerFeedData.settings[e]=i.customizerFeedData.settings[e]==t?o:t,!1!==n&&i.customizerControlAjaxAction(n),i.regenerateLayout(e)},jsonParse:function(e){try{return JSON.parse(e)}catch(e){return!1}},getCustomHeaderText:function(){return this.customizerFeedData.settings.customheadertext},shouldShowStandardHeader:function(){return this.customizerFeedData.settings.showheader&&"standard"===this.customizerFeedData.settings.headerstyle},shouldShowTextHeader:function(){return this.customizerFeedData.settings.showheader&&"text"===this.customizerFeedData.settings.headerstyle},getFlagsAttr:function(){var e=this,t=[];return e.customizerFeedData.settings.disable_resize&&t.push("resizeDisable"),e.customizerFeedData.settings.favor_local&&t.push("favorLocal"),e.customizerFeedData.settings.disable_js_image_loading&&t.push("imageLoadDisable"),e.customizerFeedData.settings.ajax_post_load&&t.push("ajaxPostLoad"),"3:4"===e.customizerFeedData.settings.playerratio&&t.push("narrowPlayer"),e.customizerFeedData.settings.disablecdn&&t.push("disablecdn"),t.toString()},shouldShowPlayer:function(){if("gallery"==this.customizerFeedData.settings.layout)return!0}},I(t,"shouldShowStandardHeader",(function(){return this.customizerFeedData.settings.showheader&&"standard"===this.customizerFeedData.settings.headerstyle})),I(t,"shouldShowTextHeader",(function(){return this.customizerFeedData.settings.showheader&&"text"===this.customizerFeedData.settings.headerstyle})),I(t,"switchToVideosSection",(function(){var e=this;e.customizerScreens.parentActiveSection=null,e.customizerScreens.parentActiveSectionData=null,e.customizerScreens.activeSection="customize_videos",e.customizerScreens.activeSectionData=e.customizerSidebarBuilder.customize.sections.customize_videos})),I(t,"setShortcodeGlobalSettings",(function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this,o=jQuery("html").find(".sb_youtube"),n=t.jsonParse(o.attr("data-options")),s=t.customizerFeedData.settings;if(o.length){if("carousel"===s.layout){var i=t.valueIsEnabled(s.carouselarrows),r=t.valueIsEnabled(s.carouselpag),a=t.valueIsEnabled(s.carouselautoplay),c=!!a&&parseInt(s.carouseltime),l=!t.checkNotEmpty(s.carouselloop)||"rewind"===s.carouselloop,u=s.carouselrows?Math.min(parseInt(s.carouselrows),2):1;delete n.gallery,delete n.masonry,delete n.grid,n.carousel=[i,r,a,c,l,u]}else"grid"==s.layout?(delete n.gallery,delete n.masonry):"masonry"==s.layout?(delete n.gallery,delete n.grid):"gallery"==s.layout&&(delete n.masonry,delete n.grid);"carousel"!==s.layout&&delete n.carousel,o.attr("data-options",JSON.stringify(n)),void 0!==window.sby_init&&e&&window.sby_init()}})),I(t,"shouldShowPlayer",(function(){if("gallery"==this.customizerFeedData.settings.layout)return!0})),I(t,"showManualConnect",(function(){this.shouldShowManualConnect=!0,this.shouldShowFeedAPIBackBtn=!0})),I(t,"showFeedSourceManualConnect",(function(){this.viewsActive.accountAPIPopup=!0,this.shouldShowManualConnect=!0})),I(t,"showAPIConnectForm",(function(){this.shouldShowFeedAPIForm=!0,this.shouldShowFeedAPIBackBtn=!0})),I(t,"hideAPIConnectForm",(function(){var e=this;e.shouldShowManualConnect=!1,e.shouldShowFeedAPIForm=!1,e.shouldShowFeedAPIBackBtn=!1})),I(t,"addAPIKey",(function(){if((e=this).selectedFeedModel.apiKey){var e,t={action:"sby_add_api_key",api:(e=this).selectedFeedModel.apiKey};e.apiKeyBtnLoader=!0,e.ajaxPost(t,(function(t){t.data,e.apiKeyBtnLoader=!1,e.apiKeyError=!1,e.apiKeyStatus=!0,e.activateView("accountAPIPopup")}))}else e.apiKeyError=!0})),I(t,"addAccessToken",(function(){if((e=this).selectedFeedModel.accessToken){var e,t={action:"sby_manual_access_token",sby_access_token:(e=this).selectedFeedModel.accessToken};e.apiKeyBtnLoader=!0,e.ajaxPost(t,(function(t){t.data,e.apiKeyBtnLoader=!1,e.accessTokenError=!1,e.apiKeyStatus=!0,e.activateView("accountAPIPopup")}))}else e.accessTokenError=!0})),I(t,"submitNewFeed",(function(){var e=this,t={action:"sby_feed_saver_manager_builder_update",feedtype:e.selectedFeed,feedtemplate:e.selectedFeedTemplate,selectedFeedModel:e.selectedFeedModel,new_insert:"true"};e.fullScreenLoader=!0,e.ajaxPost(t,(function(t){var o=t.data;o.feed_id&&o.success&&(window.location=e.builderUrl+"&feed_id="+o.feed_id)}))})),t)),e(SB_Customizer)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQU94RCxNQUdFbUMsa0JBQWtCUSxRQUUvQmEsRUFBS2tJLGlCQUFrQixFQUN2QmxJLEVBQUtvRCxTQUFTNEUsR0FBZSxTQUFTM0UsR0FDMUJBLEVBQUtDLEtBQ2hCdEQsRUFBS2tJLGlCQUFrQixFQUN2QmxJLEVBQUttSSxhQUFjLEVBQ25CbkksRUFBS29JLGNBQWUsRUFDcEJwSSxFQUFLcUksYUFBYSwyQkFmbEJySSxFQUFLbUksYUFBYyxLQXpqQnRCLHNCQWlsQmtCLFdBR2hCLElBRkluSSxFQUFPeEQsTUFFQW1DLGtCQUFrQlMsWUFBN0IsQ0FLQSxJQUFJWSxFQUNIZ0ksRUFBZ0IsQ0FDZjdFLE9BQVMsMEJBQ1RtRixrQkFIRXRJLEVBQU94RCxNQUdlbUMsa0JBQWtCUyxhQUU1Q1ksRUFBS2tJLGlCQUFrQixFQUN2QmxJLEVBQUtvRCxTQUFTNEUsR0FBZSxTQUFTM0UsR0FDMUJBLEVBQUtDLEtBQ2hCdEQsRUFBS2tJLGlCQUFrQixFQUN2QmxJLEVBQUt1SSxrQkFBbUIsRUFDeEJ2SSxFQUFLb0ksY0FBZSxFQUNwQnBJLEVBQUtxSSxhQUFhLDJCQWZsQnJJLEVBQUt1SSxrQkFBbUIsS0FybEIzQixxQkE2bUJpQixXQUNmLElBQUl2SSxFQUFPeEQsS0FDVmdNLEVBQWMsQ0FDYnJGLE9BQVMsd0NBQ1RzRixTQUFXekksRUFBSzBJLGFBQ2hCQyxhQUFlM0ksRUFBSzRJLHFCQUNwQmpLLGtCQUFvQnFCLEVBQUtyQixrQkFDekJrSyxXQUFhLFFBRWY3SSxFQUFLOEksa0JBQW1CLEVBQ3hCOUksRUFBS29ELFNBQVNvRixHQUFhLFNBQVNuRixHQUNuQyxJQUFJQyxFQUFPRCxFQUFLQyxLQUNiQSxFQUFLeUYsU0FBV3pGLEVBQUswRixVQUN2Qm5ILE9BQU9DLFNBQVc5QixFQUFLK0IsV0FBYSxZQUFjdUIsRUFBS3lGLGVBMW5CM0QsSUErbkJBL0ssRUFBUUgsbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95b3V0dWJlLWZlZWQtcHJvLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL3ZhbGlkYXRlTmFtZXNwYWNlLmpzIiwid2VicGFjazovL3lvdXR1YmUtZmVlZC1wcm8vLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvdmFsaWRhdGVIb29rTmFtZS5qcyIsIndlYnBhY2s6Ly95b3V0dWJlLWZlZWQtcHJvLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL2NyZWF0ZUFkZEhvb2suanMiLCJ3ZWJwYWNrOi8veW91dHViZS1mZWVkLXByby8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVSZW1vdmVIb29rLmpzIiwid2VicGFjazovL3lvdXR1YmUtZmVlZC1wcm8vLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvY3JlYXRlSGFzSG9vay5qcyIsIndlYnBhY2s6Ly95b3V0dWJlLWZlZWQtcHJvLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL2NyZWF0ZVJ1bkhvb2suanMiLCJ3ZWJwYWNrOi8veW91dHViZS1mZWVkLXByby8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVDdXJyZW50SG9vay5qcyIsIndlYnBhY2s6Ly95b3V0dWJlLWZlZWQtcHJvLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL2NyZWF0ZURvaW5nSG9vay5qcyIsIndlYnBhY2s6Ly95b3V0dWJlLWZlZWQtcHJvLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL2NyZWF0ZURpZEhvb2suanMiLCJ3ZWJwYWNrOi8veW91dHViZS1mZWVkLXByby8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVIb29rcy5qcyIsIndlYnBhY2s6Ly95b3V0dWJlLWZlZWQtcHJvLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL2luZGV4LmpzIiwid2VicGFjazovL3lvdXR1YmUtZmVlZC1wcm8vLi9qcy9jdXN0b21pemVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmFsaWRhdGUgYSBuYW1lc3BhY2Ugc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSB0byB2YWxpZGF0ZSAtIHNob3VsZCB0YWtlIHRoZSBmb3JtXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGB2ZW5kb3IvcGx1Z2luL2Z1bmN0aW9uYC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBuYW1lc3BhY2UgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlTmFtZXNwYWNlKG5hbWVzcGFjZSkge1xuICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBuYW1lc3BhY2UgfHwgJycgPT09IG5hbWVzcGFjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignVGhlIG5hbWVzcGFjZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIS9eW2EtekEtWl1bYS16QS1aMC05Xy5cXC1cXC9dKiQvLnRlc3QobmFtZXNwYWNlKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignVGhlIG5hbWVzcGFjZSBjYW4gb25seSBjb250YWluIG51bWJlcnMsIGxldHRlcnMsIGRhc2hlcywgcGVyaW9kcywgdW5kZXJzY29yZXMgYW5kIHNsYXNoZXMuJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlTmFtZXNwYWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVOYW1lc3BhY2UuanMubWFwIiwiLyoqXG4gKiBWYWxpZGF0ZSBhIGhvb2tOYW1lIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9va05hbWUgVGhlIGhvb2sgbmFtZSB0byB2YWxpZGF0ZS4gU2hvdWxkIGJlIGEgbm9uIGVtcHR5IHN0cmluZyBjb250YWluaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgb25seSBudW1iZXJzLCBsZXR0ZXJzLCBkYXNoZXMsIHBlcmlvZHMgYW5kIHVuZGVyc2NvcmVzLiBBbHNvLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBob29rIG5hbWUgY2Fubm90IGJlZ2luIHdpdGggYF9fYC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBob29rIG5hbWUgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlSG9va05hbWUoaG9va05hbWUpIHtcbiAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgaG9va05hbWUgfHwgJycgPT09IGhvb2tOYW1lKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKCdUaGUgaG9vayBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLicpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgvXl9fLy50ZXN0KGhvb2tOYW1lKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignVGhlIGhvb2sgbmFtZSBjYW5ub3QgYmVnaW4gd2l0aCBgX19gLicpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghL15bYS16QS1aXVthLXpBLVowLTlfLi1dKiQvLnRlc3QoaG9va05hbWUpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKCdUaGUgaG9vayBuYW1lIGNhbiBvbmx5IGNvbnRhaW4gbnVtYmVycywgbGV0dGVycywgZGFzaGVzLCBwZXJpb2RzIGFuZCB1bmRlcnNjb3Jlcy4nKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGVIb29rTmFtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRlSG9va05hbWUuanMubWFwIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHZhbGlkYXRlTmFtZXNwYWNlIGZyb20gJy4vdmFsaWRhdGVOYW1lc3BhY2UuanMnO1xuaW1wb3J0IHZhbGlkYXRlSG9va05hbWUgZnJvbSAnLi92YWxpZGF0ZUhvb2tOYW1lLmpzJztcbi8qKlxuICogQGNhbGxiYWNrIEFkZEhvb2tcbiAqXG4gKiBBZGRzIHRoZSBob29rIHRvIHRoZSBhcHByb3ByaWF0ZSBob29rcyBjb250YWluZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgICAgICAgaG9va05hbWUgICAgICBOYW1lIG9mIGhvb2sgdG8gYWRkXG4gKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgICAgICBuYW1lc3BhY2UgICAgIFRoZSB1bmlxdWUgbmFtZXNwYWNlIGlkZW50aWZ5aW5nIHRoZSBjYWxsYmFjayBpbiB0aGUgZm9ybSBgdmVuZG9yL3BsdWdpbi9mdW5jdGlvbmAuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLkNhbGxiYWNrfSBjYWxsYmFjayAgICAgIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgaG9vayBpcyBydW5cbiAqIEBwYXJhbSB7bnVtYmVyfSAgICAgICAgICAgICAgIFtwcmlvcml0eT0xMF0gUHJpb3JpdHkgb2YgdGhpcyBob29rXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gaW52b2tlZCwgd2lsbCBhZGQgYSBob29rLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuSG9va3N9ICAgIGhvb2tzICAgIEhvb2tzIGluc3RhbmNlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5TdG9yZUtleX0gc3RvcmVLZXlcbiAqXG4gKiBAcmV0dXJuIHtBZGRIb29rfSBGdW5jdGlvbiB0aGF0IGFkZHMgYSBuZXcgaG9vay5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVBZGRIb29rKGhvb2tzLCBzdG9yZUtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gYWRkSG9vayhob29rTmFtZSwgbmFtZXNwYWNlLCBjYWxsYmFjaykge1xuICAgIGxldCBwcmlvcml0eSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMTA7XG4gICAgY29uc3QgaG9va3NTdG9yZSA9IGhvb2tzW3N0b3JlS2V5XTtcblxuICAgIGlmICghdmFsaWRhdGVIb29rTmFtZShob29rTmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXZhbGlkYXRlTmFtZXNwYWNlKG5hbWVzcGFjZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGNhbGxiYWNrKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcignVGhlIGhvb2sgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVmFsaWRhdGUgbnVtZXJpYyBwcmlvcml0eVxuXG5cbiAgICBpZiAoJ251bWJlcicgIT09IHR5cGVvZiBwcmlvcml0eSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0lmIHNwZWNpZmllZCwgdGhlIGhvb2sgcHJpb3JpdHkgbXVzdCBiZSBhIG51bWJlci4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVyID0ge1xuICAgICAgY2FsbGJhY2ssXG4gICAgICBwcmlvcml0eSxcbiAgICAgIG5hbWVzcGFjZVxuICAgIH07XG5cbiAgICBpZiAoaG9va3NTdG9yZVtob29rTmFtZV0pIHtcbiAgICAgIC8vIEZpbmQgdGhlIGNvcnJlY3QgaW5zZXJ0IGluZGV4IG9mIHRoZSBuZXcgaG9vay5cbiAgICAgIGNvbnN0IGhhbmRsZXJzID0gaG9va3NTdG9yZVtob29rTmFtZV0uaGFuZGxlcnM7XG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cblxuICAgICAgbGV0IGk7XG5cbiAgICAgIGZvciAoaSA9IGhhbmRsZXJzLmxlbmd0aDsgaSA+IDA7IGktLSkge1xuICAgICAgICBpZiAocHJpb3JpdHkgPj0gaGFuZGxlcnNbaSAtIDFdLnByaW9yaXR5KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGkgPT09IGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiBhcHBlbmQsIG9wZXJhdGUgdmlhIGRpcmVjdCBhc3NpZ25tZW50LlxuICAgICAgICBoYW5kbGVyc1tpXSA9IGhhbmRsZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UsIGluc2VydCBiZWZvcmUgaW5kZXggdmlhIHNwbGljZS5cbiAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGksIDAsIGhhbmRsZXIpO1xuICAgICAgfSAvLyBXZSBtYXkgYWxzbyBiZSBjdXJyZW50bHkgZXhlY3V0aW5nIHRoaXMgaG9vay4gIElmIHRoZSBjYWxsYmFja1xuICAgICAgLy8gd2UncmUgYWRkaW5nIHdvdWxkIGNvbWUgYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbGJhY2ssIHRoZXJlJ3Mgbm9cbiAgICAgIC8vIHByb2JsZW07IG90aGVyd2lzZSB3ZSBuZWVkIHRvIGluY3JlYXNlIHRoZSBleGVjdXRpb24gaW5kZXggb2ZcbiAgICAgIC8vIGFueSBvdGhlciBydW5zIGJ5IDEgdG8gYWNjb3VudCBmb3IgdGhlIGFkZGVkIGVsZW1lbnQuXG5cblxuICAgICAgaG9va3NTdG9yZS5fX2N1cnJlbnQuZm9yRWFjaChob29rSW5mbyA9PiB7XG4gICAgICAgIGlmIChob29rSW5mby5uYW1lID09PSBob29rTmFtZSAmJiBob29rSW5mby5jdXJyZW50SW5kZXggPj0gaSkge1xuICAgICAgICAgIGhvb2tJbmZvLmN1cnJlbnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgaG9vayBvZiBpdHMgdHlwZS5cbiAgICAgIGhvb2tzU3RvcmVbaG9va05hbWVdID0ge1xuICAgICAgICBoYW5kbGVyczogW2hhbmRsZXJdLFxuICAgICAgICBydW5zOiAwXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChob29rTmFtZSAhPT0gJ2hvb2tBZGRlZCcpIHtcbiAgICAgIGhvb2tzLmRvQWN0aW9uKCdob29rQWRkZWQnLCBob29rTmFtZSwgbmFtZXNwYWNlLCBjYWxsYmFjaywgcHJpb3JpdHkpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQWRkSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUFkZEhvb2suanMubWFwIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHZhbGlkYXRlTmFtZXNwYWNlIGZyb20gJy4vdmFsaWRhdGVOYW1lc3BhY2UuanMnO1xuaW1wb3J0IHZhbGlkYXRlSG9va05hbWUgZnJvbSAnLi92YWxpZGF0ZUhvb2tOYW1lLmpzJztcbi8qKlxuICogQGNhbGxiYWNrIFJlbW92ZUhvb2tcbiAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBjYWxsYmFjayAob3IgYWxsIGNhbGxiYWNrcykgZnJvbSB0aGUgaG9vayB3aXRoIGEgZ2l2ZW4gaG9va05hbWVcbiAqIGFuZCBuYW1lc3BhY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhvb2tOYW1lICBUaGUgbmFtZSBvZiB0aGUgaG9vayB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlIFRoZSB1bmlxdWUgbmFtZXNwYWNlIGlkZW50aWZ5aW5nIHRoZSBjYWxsYmFjayBpbiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybSBgdmVuZG9yL3BsdWdpbi9mdW5jdGlvbmAuXG4gKlxuICogQHJldHVybiB7bnVtYmVyIHwgdW5kZWZpbmVkfSBUaGUgbnVtYmVyIG9mIGNhbGxiYWNrcyByZW1vdmVkLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGludm9rZWQsIHdpbGwgcmVtb3ZlIGEgc3BlY2lmaWVkIGhvb2sgb3IgYWxsXG4gKiBob29rcyBieSB0aGUgZ2l2ZW4gbmFtZS5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLkhvb2tzfSAgICBob29rcyAgICAgICAgICAgICBIb29rcyBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuU3RvcmVLZXl9IHN0b3JlS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgICAgICAgICBbcmVtb3ZlQWxsPWZhbHNlXSBXaGV0aGVyIHRvIHJlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciBhIGhvb2tOYW1lLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aG91dCByZWdhcmQgdG8gbmFtZXNwYWNlLiBVc2VkIHRvIGNyZWF0ZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHJlbW92ZUFsbCpgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcmV0dXJuIHtSZW1vdmVIb29rfSBGdW5jdGlvbiB0aGF0IHJlbW92ZXMgaG9va3MuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUmVtb3ZlSG9vayhob29rcywgc3RvcmVLZXkpIHtcbiAgbGV0IHJlbW92ZUFsbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiByZW1vdmVIb29rKGhvb2tOYW1lLCBuYW1lc3BhY2UpIHtcbiAgICBjb25zdCBob29rc1N0b3JlID0gaG9va3Nbc3RvcmVLZXldO1xuXG4gICAgaWYgKCF2YWxpZGF0ZUhvb2tOYW1lKGhvb2tOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghcmVtb3ZlQWxsICYmICF2YWxpZGF0ZU5hbWVzcGFjZShuYW1lc3BhY2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBCYWlsIGlmIG5vIGhvb2tzIGV4aXN0IGJ5IHRoaXMgbmFtZS5cblxuXG4gICAgaWYgKCFob29rc1N0b3JlW2hvb2tOYW1lXSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgbGV0IGhhbmRsZXJzUmVtb3ZlZCA9IDA7XG5cbiAgICBpZiAocmVtb3ZlQWxsKSB7XG4gICAgICBoYW5kbGVyc1JlbW92ZWQgPSBob29rc1N0b3JlW2hvb2tOYW1lXS5oYW5kbGVycy5sZW5ndGg7XG4gICAgICBob29rc1N0b3JlW2hvb2tOYW1lXSA9IHtcbiAgICAgICAgcnVuczogaG9va3NTdG9yZVtob29rTmFtZV0ucnVucyxcbiAgICAgICAgaGFuZGxlcnM6IFtdXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcnkgdG8gZmluZCB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIHRvIHJlbW92ZS5cbiAgICAgIGNvbnN0IGhhbmRsZXJzID0gaG9va3NTdG9yZVtob29rTmFtZV0uaGFuZGxlcnM7XG5cbiAgICAgIGZvciAobGV0IGkgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAoaGFuZGxlcnNbaV0ubmFtZXNwYWNlID09PSBuYW1lc3BhY2UpIHtcbiAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgaGFuZGxlcnNSZW1vdmVkKys7IC8vIFRoaXMgY2FsbGJhY2sgbWF5IGFsc28gYmUgcGFydCBvZiBhIGhvb2sgdGhhdCBpc1xuICAgICAgICAgIC8vIGN1cnJlbnRseSBleGVjdXRpbmcuICBJZiB0aGUgY2FsbGJhY2sgd2UncmUgcmVtb3ZpbmdcbiAgICAgICAgICAvLyBjb21lcyBhZnRlciB0aGUgY3VycmVudCBjYWxsYmFjaywgdGhlcmUncyBubyBwcm9ibGVtO1xuICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBuZWVkIHRvIGRlY3JlYXNlIHRoZSBleGVjdXRpb24gaW5kZXggb2YgYW55XG4gICAgICAgICAgLy8gb3RoZXIgcnVucyBieSAxIHRvIGFjY291bnQgZm9yIHRoZSByZW1vdmVkIGVsZW1lbnQuXG5cbiAgICAgICAgICBob29rc1N0b3JlLl9fY3VycmVudC5mb3JFYWNoKGhvb2tJbmZvID0+IHtcbiAgICAgICAgICAgIGlmIChob29rSW5mby5uYW1lID09PSBob29rTmFtZSAmJiBob29rSW5mby5jdXJyZW50SW5kZXggPj0gaSkge1xuICAgICAgICAgICAgICBob29rSW5mby5jdXJyZW50SW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChob29rTmFtZSAhPT0gJ2hvb2tSZW1vdmVkJykge1xuICAgICAgaG9va3MuZG9BY3Rpb24oJ2hvb2tSZW1vdmVkJywgaG9va05hbWUsIG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhbmRsZXJzUmVtb3ZlZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUmVtb3ZlSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVJlbW92ZUhvb2suanMubWFwIiwiLyoqXG4gKiBAY2FsbGJhY2sgSGFzSG9va1xuICpcbiAqIFJldHVybnMgd2hldGhlciBhbnkgaGFuZGxlcnMgYXJlIGF0dGFjaGVkIGZvciB0aGUgZ2l2ZW4gaG9va05hbWUgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9va05hbWUgICAgVGhlIG5hbWUgb2YgdGhlIGhvb2sgdG8gY2hlY2sgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lc3BhY2VdIE9wdGlvbmFsLiBUaGUgdW5pcXVlIG5hbWVzcGFjZSBpZGVudGlmeWluZyB0aGUgY2FsbGJhY2tcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZm9ybSBgdmVuZG9yL3BsdWdpbi9mdW5jdGlvbmAuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGVyZSBhcmUgaGFuZGxlcnMgdGhhdCBhcmUgYXR0YWNoZWQgdG8gdGhlIGdpdmVuIGhvb2suXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gaW52b2tlZCwgd2lsbCByZXR1cm4gd2hldGhlciBhbnkgaGFuZGxlcnMgYXJlXG4gKiBhdHRhY2hlZCB0byBhIHBhcnRpY3VsYXIgaG9vay5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLkhvb2tzfSAgICBob29rcyAgICBIb29rcyBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuU3RvcmVLZXl9IHN0b3JlS2V5XG4gKlxuICogQHJldHVybiB7SGFzSG9va30gRnVuY3Rpb24gdGhhdCByZXR1cm5zIHdoZXRoZXIgYW55IGhhbmRsZXJzIGFyZVxuICogICAgICAgICAgICAgICAgICAgYXR0YWNoZWQgdG8gYSBwYXJ0aWN1bGFyIGhvb2sgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSGFzSG9vayhob29rcywgc3RvcmVLZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhc0hvb2soaG9va05hbWUsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGhvb2tzU3RvcmUgPSBob29rc1tzdG9yZUtleV07IC8vIFVzZSB0aGUgbmFtZXNwYWNlIGlmIHByb3ZpZGVkLlxuXG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbmFtZXNwYWNlKSB7XG4gICAgICByZXR1cm4gaG9va05hbWUgaW4gaG9va3NTdG9yZSAmJiBob29rc1N0b3JlW2hvb2tOYW1lXS5oYW5kbGVycy5zb21lKGhvb2sgPT4gaG9vay5uYW1lc3BhY2UgPT09IG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvb2tOYW1lIGluIGhvb2tzU3RvcmU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc0hvb2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVIYXNIb29rLmpzLm1hcCIsIi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGludm9rZWQsIHdpbGwgZXhlY3V0ZSBhbGwgY2FsbGJhY2tzXG4gKiByZWdpc3RlcmVkIHRvIGEgaG9vayBvZiB0aGUgc3BlY2lmaWVkIHR5cGUsIG9wdGlvbmFsbHkgcmV0dXJuaW5nIHRoZSBmaW5hbFxuICogdmFsdWUgb2YgdGhlIGNhbGwgY2hhaW4uXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5Ib29rc30gICAgaG9va3MgICAgICAgICAgICAgICAgICBIb29rcyBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuU3RvcmVLZXl9IHN0b3JlS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgICAgICAgICBbcmV0dXJuRmlyc3RBcmc9ZmFsc2VdIFdoZXRoZXIgZWFjaCBob29rIGNhbGxiYWNrIGlzIGV4cGVjdGVkIHRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdHMgZmlyc3QgYXJndW1lbnQuXG4gKlxuICogQHJldHVybiB7KGhvb2tOYW1lOnN0cmluZywgLi4uYXJnczogdW5rbm93bltdKSA9PiB1bmtub3dufSBGdW5jdGlvbiB0aGF0IHJ1bnMgaG9vayBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJ1bkhvb2soaG9va3MsIHN0b3JlS2V5KSB7XG4gIGxldCByZXR1cm5GaXJzdEFyZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiBydW5Ib29rcyhob29rTmFtZSkge1xuICAgIGNvbnN0IGhvb2tzU3RvcmUgPSBob29rc1tzdG9yZUtleV07XG5cbiAgICBpZiAoIWhvb2tzU3RvcmVbaG9va05hbWVdKSB7XG4gICAgICBob29rc1N0b3JlW2hvb2tOYW1lXSA9IHtcbiAgICAgICAgaGFuZGxlcnM6IFtdLFxuICAgICAgICBydW5zOiAwXG4gICAgICB9O1xuICAgIH1cblxuICAgIGhvb2tzU3RvcmVbaG9va05hbWVdLnJ1bnMrKztcbiAgICBjb25zdCBoYW5kbGVycyA9IGhvb2tzU3RvcmVbaG9va05hbWVdLmhhbmRsZXJzOyAvLyBUaGUgZm9sbG93aW5nIGNvZGUgaXMgc3RyaXBwZWQgZnJvbSBwcm9kdWN0aW9uIGJ1aWxkcy5cblxuICAgIGlmICgncHJvZHVjdGlvbicgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBIYW5kbGUgYW55ICdhbGwnIGhvb2tzIHJlZ2lzdGVyZWQuXG4gICAgICBpZiAoJ2hvb2tBZGRlZCcgIT09IGhvb2tOYW1lICYmIGhvb2tzU3RvcmUuYWxsKSB7XG4gICAgICAgIGhhbmRsZXJzLnB1c2goLi4uaG9va3NTdG9yZS5hbGwuaGFuZGxlcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICghaGFuZGxlcnMgfHwgIWhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHJldHVybkZpcnN0QXJnID8gYXJnc1swXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBob29rSW5mbyA9IHtcbiAgICAgIG5hbWU6IGhvb2tOYW1lLFxuICAgICAgY3VycmVudEluZGV4OiAwXG4gICAgfTtcblxuICAgIGhvb2tzU3RvcmUuX19jdXJyZW50LnB1c2goaG9va0luZm8pO1xuXG4gICAgd2hpbGUgKGhvb2tJbmZvLmN1cnJlbnRJbmRleCA8IGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW2hvb2tJbmZvLmN1cnJlbnRJbmRleF07XG4gICAgICBjb25zdCByZXN1bHQgPSBoYW5kbGVyLmNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3MpO1xuXG4gICAgICBpZiAocmV0dXJuRmlyc3RBcmcpIHtcbiAgICAgICAgYXJnc1swXSA9IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgaG9va0luZm8uY3VycmVudEluZGV4Kys7XG4gICAgfVxuXG4gICAgaG9va3NTdG9yZS5fX2N1cnJlbnQucG9wKCk7XG5cbiAgICBpZiAocmV0dXJuRmlyc3RBcmcpIHtcbiAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUnVuSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVJ1bkhvb2suanMubWFwIiwiLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gaW52b2tlZCwgd2lsbCByZXR1cm4gdGhlIG5hbWUgb2YgdGhlXG4gKiBjdXJyZW50bHkgcnVubmluZyBob29rLCBvciBgbnVsbGAgaWYgbm8gaG9vayBvZiB0aGUgZ2l2ZW4gdHlwZSBpcyBjdXJyZW50bHlcbiAqIHJ1bm5pbmcuXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5Ib29rc30gICAgaG9va3MgICAgSG9va3MgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLlN0b3JlS2V5fSBzdG9yZUtleVxuICpcbiAqIEByZXR1cm4geygpID0+IHN0cmluZyB8IG51bGx9IEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3VycmVudCBob29rIG5hbWUgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ3VycmVudEhvb2soaG9va3MsIHN0b3JlS2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjdXJyZW50SG9vaygpIHtcbiAgICB2YXIgX2hvb2tzU3RvcmUkX19jdXJyZW50LCBfaG9va3NTdG9yZSRfX2N1cnJlbnQyO1xuXG4gICAgY29uc3QgaG9va3NTdG9yZSA9IGhvb2tzW3N0b3JlS2V5XTtcbiAgICByZXR1cm4gKF9ob29rc1N0b3JlJF9fY3VycmVudCA9IChfaG9va3NTdG9yZSRfX2N1cnJlbnQyID0gaG9va3NTdG9yZS5fX2N1cnJlbnRbaG9va3NTdG9yZS5fX2N1cnJlbnQubGVuZ3RoIC0gMV0pID09PSBudWxsIHx8IF9ob29rc1N0b3JlJF9fY3VycmVudDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ob29rc1N0b3JlJF9fY3VycmVudDIubmFtZSkgIT09IG51bGwgJiYgX2hvb2tzU3RvcmUkX19jdXJyZW50ICE9PSB2b2lkIDAgPyBfaG9va3NTdG9yZSRfX2N1cnJlbnQgOiBudWxsO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDdXJyZW50SG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUN1cnJlbnRIb29rLmpzLm1hcCIsIi8qKlxuICogQGNhbGxiYWNrIERvaW5nSG9va1xuICogUmV0dXJucyB3aGV0aGVyIGEgaG9vayBpcyBjdXJyZW50bHkgYmVpbmcgZXhlY3V0ZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtob29rTmFtZV0gVGhlIG5hbWUgb2YgdGhlIGhvb2sgdG8gY2hlY2sgZm9yLiAgSWZcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9taXR0ZWQsIHdpbGwgY2hlY2sgZm9yIGFueSBob29rIGJlaW5nIGV4ZWN1dGVkLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGhvb2sgaXMgYmVpbmcgZXhlY3V0ZWQuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gaW52b2tlZCwgd2lsbCByZXR1cm4gd2hldGhlciBhIGhvb2sgaXNcbiAqIGN1cnJlbnRseSBiZWluZyBleGVjdXRlZC5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLkhvb2tzfSAgICBob29rcyAgICBIb29rcyBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuU3RvcmVLZXl9IHN0b3JlS2V5XG4gKlxuICogQHJldHVybiB7RG9pbmdIb29rfSBGdW5jdGlvbiB0aGF0IHJldHVybnMgd2hldGhlciBhIGhvb2sgaXMgY3VycmVudGx5XG4gKiAgICAgICAgICAgICAgICAgICAgIGJlaW5nIGV4ZWN1dGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVEb2luZ0hvb2soaG9va3MsIHN0b3JlS2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBkb2luZ0hvb2soaG9va05hbWUpIHtcbiAgICBjb25zdCBob29rc1N0b3JlID0gaG9va3Nbc3RvcmVLZXldOyAvLyBJZiB0aGUgaG9va05hbWUgd2FzIG5vdCBwYXNzZWQsIGNoZWNrIGZvciBhbnkgY3VycmVudCBob29rLlxuXG4gICAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgaG9va05hbWUpIHtcbiAgICAgIHJldHVybiAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGhvb2tzU3RvcmUuX19jdXJyZW50WzBdO1xuICAgIH0gLy8gUmV0dXJuIHRoZSBfX2N1cnJlbnQgaG9vay5cblxuXG4gICAgcmV0dXJuIGhvb2tzU3RvcmUuX19jdXJyZW50WzBdID8gaG9va05hbWUgPT09IGhvb2tzU3RvcmUuX19jdXJyZW50WzBdLm5hbWUgOiBmYWxzZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRG9pbmdIb29rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRG9pbmdIb29rLmpzLm1hcCIsIi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB2YWxpZGF0ZUhvb2tOYW1lIGZyb20gJy4vdmFsaWRhdGVIb29rTmFtZS5qcyc7XG4vKipcbiAqIEBjYWxsYmFjayBEaWRIb29rXG4gKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHRpbWVzIGFuIGFjdGlvbiBoYXMgYmVlbiBmaXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9va05hbWUgVGhlIGhvb2sgbmFtZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXIgfCB1bmRlZmluZWR9IFRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGhvb2sgaGFzIHJ1bi5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBpbnZva2VkLCB3aWxsIHJldHVybiB0aGUgbnVtYmVyIG9mIHRpbWVzIGFcbiAqIGhvb2sgaGFzIGJlZW4gY2FsbGVkLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuSG9va3N9ICAgIGhvb2tzICAgIEhvb2tzIGluc3RhbmNlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5TdG9yZUtleX0gc3RvcmVLZXlcbiAqXG4gKiBAcmV0dXJuIHtEaWRIb29rfSBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBob29rJ3MgY2FsbCBjb3VudC5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEaWRIb29rKGhvb2tzLCBzdG9yZUtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gZGlkSG9vayhob29rTmFtZSkge1xuICAgIGNvbnN0IGhvb2tzU3RvcmUgPSBob29rc1tzdG9yZUtleV07XG5cbiAgICBpZiAoIXZhbGlkYXRlSG9va05hbWUoaG9va05hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvb2tzU3RvcmVbaG9va05hbWVdICYmIGhvb2tzU3RvcmVbaG9va05hbWVdLnJ1bnMgPyBob29rc1N0b3JlW2hvb2tOYW1lXS5ydW5zIDogMDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRGlkSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZURpZEhvb2suanMubWFwIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IGNyZWF0ZUFkZEhvb2sgZnJvbSAnLi9jcmVhdGVBZGRIb29rJztcbmltcG9ydCBjcmVhdGVSZW1vdmVIb29rIGZyb20gJy4vY3JlYXRlUmVtb3ZlSG9vayc7XG5pbXBvcnQgY3JlYXRlSGFzSG9vayBmcm9tICcuL2NyZWF0ZUhhc0hvb2snO1xuaW1wb3J0IGNyZWF0ZVJ1bkhvb2sgZnJvbSAnLi9jcmVhdGVSdW5Ib29rJztcbmltcG9ydCBjcmVhdGVDdXJyZW50SG9vayBmcm9tICcuL2NyZWF0ZUN1cnJlbnRIb29rJztcbmltcG9ydCBjcmVhdGVEb2luZ0hvb2sgZnJvbSAnLi9jcmVhdGVEb2luZ0hvb2snO1xuaW1wb3J0IGNyZWF0ZURpZEhvb2sgZnJvbSAnLi9jcmVhdGVEaWRIb29rJztcbi8qKlxuICogSW50ZXJuYWwgY2xhc3MgZm9yIGNvbnN0cnVjdGluZyBob29rcy4gVXNlIGBjcmVhdGVIb29rcygpYCBmdW5jdGlvblxuICpcbiAqIE5vdGUsIGl0IGlzIG5lY2Vzc2FyeSB0byBleHBvc2UgdGhpcyBjbGFzcyB0byBtYWtlIGl0cyB0eXBlIHB1YmxpYy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBjbGFzcyBfSG9va3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLicpLlN0b3JlfSBhY3Rpb25zICovXG4gICAgdGhpcy5hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmFjdGlvbnMuX19jdXJyZW50ID0gW107XG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4nKS5TdG9yZX0gZmlsdGVycyAqL1xuXG4gICAgdGhpcy5maWx0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmZpbHRlcnMuX19jdXJyZW50ID0gW107XG4gICAgdGhpcy5hZGRBY3Rpb24gPSBjcmVhdGVBZGRIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5hZGRGaWx0ZXIgPSBjcmVhdGVBZGRIb29rKHRoaXMsICdmaWx0ZXJzJyk7XG4gICAgdGhpcy5yZW1vdmVBY3Rpb24gPSBjcmVhdGVSZW1vdmVIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5yZW1vdmVGaWx0ZXIgPSBjcmVhdGVSZW1vdmVIb29rKHRoaXMsICdmaWx0ZXJzJyk7XG4gICAgdGhpcy5oYXNBY3Rpb24gPSBjcmVhdGVIYXNIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5oYXNGaWx0ZXIgPSBjcmVhdGVIYXNIb29rKHRoaXMsICdmaWx0ZXJzJyk7XG4gICAgdGhpcy5yZW1vdmVBbGxBY3Rpb25zID0gY3JlYXRlUmVtb3ZlSG9vayh0aGlzLCAnYWN0aW9ucycsIHRydWUpO1xuICAgIHRoaXMucmVtb3ZlQWxsRmlsdGVycyA9IGNyZWF0ZVJlbW92ZUhvb2sodGhpcywgJ2ZpbHRlcnMnLCB0cnVlKTtcbiAgICB0aGlzLmRvQWN0aW9uID0gY3JlYXRlUnVuSG9vayh0aGlzLCAnYWN0aW9ucycpO1xuICAgIHRoaXMuYXBwbHlGaWx0ZXJzID0gY3JlYXRlUnVuSG9vayh0aGlzLCAnZmlsdGVycycsIHRydWUpO1xuICAgIHRoaXMuY3VycmVudEFjdGlvbiA9IGNyZWF0ZUN1cnJlbnRIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5jdXJyZW50RmlsdGVyID0gY3JlYXRlQ3VycmVudEhvb2sodGhpcywgJ2ZpbHRlcnMnKTtcbiAgICB0aGlzLmRvaW5nQWN0aW9uID0gY3JlYXRlRG9pbmdIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5kb2luZ0ZpbHRlciA9IGNyZWF0ZURvaW5nSG9vayh0aGlzLCAnZmlsdGVycycpO1xuICAgIHRoaXMuZGlkQWN0aW9uID0gY3JlYXRlRGlkSG9vayh0aGlzLCAnYWN0aW9ucycpO1xuICAgIHRoaXMuZGlkRmlsdGVyID0gY3JlYXRlRGlkSG9vayh0aGlzLCAnZmlsdGVycycpO1xuICB9XG5cbn1cbi8qKiBAdHlwZWRlZiB7X0hvb2tzfSBIb29rcyAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2YgdGhlIGhvb2tzIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtIb29rc30gQSBIb29rcyBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVIb29rcygpIHtcbiAgcmV0dXJuIG5ldyBfSG9va3MoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSG9va3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVIb29rcy5qcy5tYXAiLCIvKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgY3JlYXRlSG9va3MgZnJvbSAnLi9jcmVhdGVIb29rcyc7XG4vKiogQHR5cGVkZWYgeyguLi5hcmdzOiBhbnlbXSk9PmFueX0gQ2FsbGJhY2sgKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBIYW5kbGVyXG4gKiBAcHJvcGVydHkge0NhbGxiYWNrfSBjYWxsYmFjayAgVGhlIGNhbGxiYWNrXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZVxuICogQHByb3BlcnR5IHtudW1iZXJ9ICAgcHJpb3JpdHkgIFRoZSBuYW1lc3BhY2VcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIEhvb2tcbiAqIEBwcm9wZXJ0eSB7SGFuZGxlcltdfSBoYW5kbGVycyBBcnJheSBvZiBoYW5kbGVyc1xuICogQHByb3BlcnR5IHtudW1iZXJ9ICAgIHJ1bnMgICAgIFJ1biBjb3VudGVyXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBDdXJyZW50XG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSAgICAgICAgIEhvb2sgbmFtZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGN1cnJlbnRJbmRleCBUaGUgaW5kZXhcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtSZWNvcmQ8c3RyaW5nLCBIb29rPiAmIHtfX2N1cnJlbnQ6IEN1cnJlbnRbXX19IFN0b3JlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7J2FjdGlvbnMnIHwgJ2ZpbHRlcnMnfSBTdG9yZUtleVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9jcmVhdGVIb29rcycpLkhvb2tzfSBIb29rc1xuICovXG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0SG9va3MgPSBjcmVhdGVIb29rcygpO1xuY29uc3Qge1xuICBhZGRBY3Rpb24sXG4gIGFkZEZpbHRlcixcbiAgcmVtb3ZlQWN0aW9uLFxuICByZW1vdmVGaWx0ZXIsXG4gIGhhc0FjdGlvbixcbiAgaGFzRmlsdGVyLFxuICByZW1vdmVBbGxBY3Rpb25zLFxuICByZW1vdmVBbGxGaWx0ZXJzLFxuICBkb0FjdGlvbixcbiAgYXBwbHlGaWx0ZXJzLFxuICBjdXJyZW50QWN0aW9uLFxuICBjdXJyZW50RmlsdGVyLFxuICBkb2luZ0FjdGlvbixcbiAgZG9pbmdGaWx0ZXIsXG4gIGRpZEFjdGlvbixcbiAgZGlkRmlsdGVyLFxuICBhY3Rpb25zLFxuICBmaWx0ZXJzXG59ID0gZGVmYXVsdEhvb2tzO1xuZXhwb3J0IHsgY3JlYXRlSG9va3MsIGFkZEFjdGlvbiwgYWRkRmlsdGVyLCByZW1vdmVBY3Rpb24sIHJlbW92ZUZpbHRlciwgaGFzQWN0aW9uLCBoYXNGaWx0ZXIsIHJlbW92ZUFsbEFjdGlvbnMsIHJlbW92ZUFsbEZpbHRlcnMsIGRvQWN0aW9uLCBhcHBseUZpbHRlcnMsIGN1cnJlbnRBY3Rpb24sIGN1cnJlbnRGaWx0ZXIsIGRvaW5nQWN0aW9uLCBkb2luZ0ZpbHRlciwgZGlkQWN0aW9uLCBkaWRGaWx0ZXIsIGFjdGlvbnMsIGZpbHRlcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7YWRkRmlsdGVyLCBhZGRBY3Rpb259IGZyb20gXCJAd29yZHByZXNzL2hvb2tzXCI7XHJcblxyXG5cclxuU0JfQ3VzdG9taXplci5pbml0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcblx0U0JfQ3VzdG9taXplci5leHRyYURhdGEgPSB7XHJcblx0XHQuLi5TQl9DdXN0b21pemVyLmV4dHJhRGF0YSxcclxuXHRcdGFsbEZlZWRzU2NyZWVuIDogc2JjX2J1aWxkZXIuYWxsRmVlZHNTY3JlZW4sXHJcblx0XHRmZWVkc0xpc3QgOiBzYmNfYnVpbGRlci5mZWVkcyxcclxuXHRcdGxlZ2FjeUZlZWRzTGlzdDogc2JjX2J1aWxkZXIubGVnYWN5RmVlZHMsXHJcblx0XHR0b29sdGlwQ29udGVudCA6IHNiY19idWlsZGVyLmZlZWR0eXBlc1Rvb2x0aXBDb250ZW50LFxyXG5cdFx0ZmVlZFNldHRpbmdzRG9tT3B0aW9ucyA6IG51bGwsXHJcblx0XHRzZWxlY3RlZEZlZWRNb2RlbCA6IHtcclxuXHRcdFx0Y2hhbm5lbDogc2JjX2J1aWxkZXIucHJlZmlsbGVkQ2hhbm5lbElkLFxyXG5cdFx0XHRwbGF5bGlzdDogJycsXHJcblx0XHRcdGZhdm9yaXRlczogc2JjX2J1aWxkZXIucHJlZmlsbGVkQ2hhbm5lbElkLFxyXG5cdFx0XHRzZWFyY2g6ICcnLFxyXG5cdFx0XHRsaXZlOiBzYmNfYnVpbGRlci5wcmVmaWxsZWRDaGFubmVsSWQsXHJcblx0XHRcdHNpbmdsZTogJycsXHJcblx0XHRcdGFwaUtleTogJycsXHJcblx0XHRcdGFjY2Vzc1Rva2VuOiAnJ1xyXG5cdFx0fSxcclxuXHRcdHlvdXR1YmVBY2NvdW50Q29ubmVjdFVSTCA6IHNiY19idWlsZGVyLnlvdXR1YmVBY2NvdW50Q29ubmVjdFVSTCxcclxuXHRcdHByZWZpbGxlZENoYW5uZWxJZDogc2JjX2J1aWxkZXIucHJlZmlsbGVkQ2hhbm5lbElkLFxyXG5cdFx0ZGlzbWlzc0xpdGU6IHNiY19idWlsZGVyLnlvdXR1YmVfZmVlZF9kaXNtaXNzX2xpdGUsXHJcblx0XHRzaG91bGRTaG93RmVlZEFQSUZvcm0gOiBmYWxzZSxcclxuXHRcdHNob3VsZFNob3dNYW51YWxDb25uZWN0IDogZmFsc2UsXHJcblx0fVxyXG5cclxuXHRTQl9DdXN0b21pemVyLmV4dHJhTWV0aG9kcyA9IHtcclxuXHRcdC4uLlNCX0N1c3RvbWl6ZXIuZXh0cmFNZXRob2RzLFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDaGFuZ2UgU2V0dGluZ3MgVmFsdWVcclxuXHRcdCAqXHJcblx0XHQgKiBAc2luY2UgMi4wXHJcblx0XHQgKi9cclxuXHRcdGNoYW5nZVNldHRpbmdWYWx1ZSA6IGZ1bmN0aW9uKHNldHRpbmdJRCwgdmFsdWUsIGRvUHJvY2VzcyA9IHRydWUsIGFqYXhBY3Rpb24gPSBmYWxzZSkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdGlmKGRvUHJvY2Vzcyl7XHJcblx0XHRcdFx0c2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3Nbc2V0dGluZ0lEXSA9IHZhbHVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGFqYXhBY3Rpb24gIT09IGZhbHNlKXtcclxuXHRcdFx0XHRzZWxmLmN1c3RvbWl6ZXJDb250cm9sQWpheEFjdGlvbihhamF4QWN0aW9uLCBzZXR0aW5nSUQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNlbGYucmVnZW5lcmF0ZUxheW91dChzZXR0aW5nSUQpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRjaGVja0V4dGVuc2lvbkFjdGl2ZSA6IGZ1bmN0aW9uKGV4dGVuc2lvbil7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0cmV0dXJuIHNlbGYuYWN0aXZlRXh0ZW5zaW9uc1tleHRlbnNpb25dO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFNob3VsZCBzaG93IG92ZXJsYXkgZm9yIHRoZSBzaWRlYmFyIGVsZW1lbnRzIG9uIHRvcFxyXG5cdFx0ICogXHJcblx0XHQgKiBAc2luY2UgMi4wXHJcblx0XHQgKi9cclxuXHRcdHNob3VsZFNob3dPdmVybGF5KGNvbnRyb2wpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRpZiAoICFzZWxmLnNieUlzUHJvIHx8IHNlbGYuc2J5TGljZW5zZU5vdGljZUFjdGl2ZSApIHtcclxuXHRcdFx0XHRyZXR1cm4gY29udHJvbC5jaGVja0V4dGVuc2lvblBvcHVwICE9IHVuZGVmaW5lZCB8fCAoXHJcblx0XHRcdFx0XHRjb250cm9sLmNvbmRpdGlvbiAhPSB1bmRlZmluZWQgfHwgXHJcblx0XHRcdFx0XHRjb250cm9sLmNoZWNrRXh0ZW5zaW9uICE9IHVuZGVmaW5lZCB8fCBcclxuXHRcdFx0XHRcdGNvbnRyb2wuY2hlY2tFeHRlbnNpb25EaW1tZWQgIT0gdW5kZWZpbmVkICA/IFxyXG5cdFx0XHRcdFx0IXNlbGYuY2hlY2tDb250cm9sQ29uZGl0aW9uKGNvbnRyb2wuY29uZGl0aW9uLCBjb250cm9sLmNoZWNrRXh0ZW5zaW9uLCBjb250cm9sLmNoZWNrRXh0ZW5zaW9uRGltbWVkKSA6IFxyXG5cdFx0XHRcdFx0ZmFsc2VcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbnRyb2wuY29uZGl0aW9uICE9IHVuZGVmaW5lZCB8fCBcclxuXHRcdFx0XHRcdGNvbnRyb2wuY2hlY2tFeHRlbnNpb24gIT0gdW5kZWZpbmVkIHx8IFxyXG5cdFx0XHRcdFx0Y29udHJvbC5jaGVja0V4dGVuc2lvbkRpbW1lZCAhPSB1bmRlZmluZWQgID8gXHJcblx0XHRcdFx0XHQhc2VsZi5jaGVja0NvbnRyb2xDb25kaXRpb24oY29udHJvbC5jb25kaXRpb24sIGNvbnRyb2wuY2hlY2tFeHRlbnNpb24sIGNvbnRyb2wuY2hlY2tFeHRlbnNpb25EaW1tZWQpIDogXHJcblx0XHRcdFx0XHRmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFNob3VsZCBzaG93IHRvZ2dsZXNldCB0eXBlIGNvdmVyXHJcblx0XHQgKiBcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0c2hvdWxkU2hvd1RvZ2dsZXNldENvdmVyIDogZnVuY3Rpb24odG9nZ2xlKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0aWYgKCAhc2VsZi5zYnlJc1BybyB8fCBzZWxmLnNieUxpY2Vuc2VOb3RpY2VBY3RpdmUgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRvZ2dsZS5jaGVja0V4dGVuc2lvbiAhPSB1bmRlZmluZWQgJiYgIXNlbGYuY2hlY2tFeHRlbnNpb25BY3RpdmUodG9nZ2xlLmNoZWNrRXh0ZW5zaW9uKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogT3BlbiBleHRlbnNpb24gcG9wdXAgZnJvbSB0b2dnbGVzZXQgY292ZXJcclxuXHRcdCAqIFxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICovXHJcblx0XHR0b2dnbGVzZXRFeHRQb3B1cCA6IGZ1bmN0aW9uKHRvZ2dsZSkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdHNlbGYudmlld3NBY3RpdmUuZXh0ZW5zaW9uc1BvcHVwRWxlbWVudCA9IHRvZ2dsZS5jaGVja0V4dGVuc2lvbjtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTaG9ydGNvZGUgR2xvYmFsIExheW91dCBTZXR0aW5nc1xyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0cmVnZW5lcmF0ZUxheW91dCA6IGZ1bmN0aW9uKHNldHRpbmdJRCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0cmVnZW5lcmF0ZUZlZWRIVE1MID0gXHRbXHJcblx0XHRcdFx0XHQnbGF5b3V0J1xyXG5cdFx0XHRcdF0sXHJcblx0XHRcdFx0cmVsYXlvdXRGZWVkID0gW1xyXG5cdFx0XHRcdFx0J2xheW91dCcsXHJcblx0XHRcdFx0XHQnY2Fyb3VzZWxhcnJvd3MnLFxyXG5cdFx0XHRcdFx0J2Nhcm91c2VscGFnJyxcclxuXHRcdFx0XHRcdCdjYXJvdXNlbGF1dG9wbGF5JyxcclxuXHRcdFx0XHRcdCdjYXJvdXNlbHRpbWUnLFxyXG5cdFx0XHRcdFx0J2Nhcm91c2VsbG9vcCcsXHJcblx0XHRcdFx0XHQnY2Fyb3VzZWxyb3dzJyxcclxuXHRcdFx0XHRcdCdjb2xzJyxcclxuXHRcdFx0XHRcdCdjb2xzdGFibGV0JyxcclxuXHRcdFx0XHRcdCdjb2xzbW9iaWxlJyxcclxuXHRcdFx0XHRcdCdpbWFnZXBhZGRpbmcnXHJcblx0XHRcdFx0XTtcclxuXHRcdFx0aWYoIHJlbGF5b3V0RmVlZC5pbmNsdWRlcyggc2V0dGluZ0lEICkgKXtcclxuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHRzZWxmLnNldFNob3J0Y29kZUdsb2JhbFNldHRpbmdzKHRydWUpO1xyXG5cdFx0XHRcdH0sIDIwMClcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEJhY2sgdG8gYWxsIGZlZWRzXHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICovXHJcblx0XHRiYWNrVG9BbGxGZWVkcyA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdGlmICggSlNPTi5zdHJpbmdpZnkoc2VsZi5jdXN0b21pemVyRmVlZERhdGFJbml0aWFsKSA9PT0gSlNPTi5zdHJpbmdpZnkoc2VsZi5jdXN0b21pemVyRmVlZERhdGEpICkge1xyXG5cdFx0XHRcdHdpbmRvdy5sb2NhdGlvbiA9IHNlbGYuYnVpbGRlclVybDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzZWxmLm9wZW5EaWFsb2dCb3goJ2JhY2tBbGxUb0ZlZWQnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIE9wZW4gRGlhbG9nIEJveFxyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0b3BlbkRpYWxvZ0JveCA6IGZ1bmN0aW9uKHR5cGUsIGFyZ3MgPSBbXSl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRoZWFkaW5nID0gc2VsZi5kaWFsb2dCb3hQb3B1cFNjcmVlblt0eXBlXS5oZWFkaW5nLFxyXG5cdFx0XHRcdGRlc2NyaXB0aW9uID0gc2VsZi5kaWFsb2dCb3hQb3B1cFNjcmVlblt0eXBlXS5kZXNjcmlwdGlvbixcclxuXHRcdFx0XHRjdXN0b21CdXR0b25zID0gc2VsZi5kaWFsb2dCb3hQb3B1cFNjcmVlblt0eXBlXS5jdXN0b21CdXR0b25zO1xyXG5cdFx0XHRzd2l0Y2ggKHR5cGUpIHtcclxuXHRcdFx0XHRjYXNlIFwiZGVsZXRlU2luZ2xlRmVlZFwiOlxyXG5cdFx0XHRcdFx0c2VsZi5mZWVkVG9EZWxldGUgPSBhcmdzO1xyXG5cdFx0XHRcdFx0aGVhZGluZyA9IGhlYWRpbmcucmVwbGFjZShcIiNcIiwgc2VsZi5mZWVkVG9EZWxldGUuZmVlZF9uYW1lKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNlbGYuZGlhbG9nQm94ID0ge1xyXG5cdFx0XHRcdGFjdGl2ZSA6IHRydWUsXHJcblx0XHRcdFx0dHlwZSA6IHR5cGUsXHJcblx0XHRcdFx0aGVhZGluZyA6IGhlYWRpbmcsXHJcblx0XHRcdFx0ZGVzY3JpcHRpb24gOiBkZXNjcmlwdGlvbixcclxuXHRcdFx0XHRjdXN0b21CdXR0b25zIDogY3VzdG9tQnV0dG9uc1xyXG5cdFx0XHR9O1xyXG5cdFx0XHR3aW5kb3cuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ29uZmlybSBEaWFsb2cgQm94IEFjdGlvbnNcclxuXHRcdCAqXHJcblx0XHQgKiBAc2luY2UgMi4wXHJcblx0XHQgKi9cclxuXHRcdGNvbmZpcm1EaWFsb2dBY3Rpb24gOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdHN3aXRjaCAoc2VsZi5kaWFsb2dCb3gudHlwZSkge1xyXG5cdFx0XHRcdGNhc2UgJ2RlbGV0ZVNpbmdsZUZlZWQnOlxyXG5cdFx0XHRcdFx0c2VsZi5mZWVkQWN0aW9uRGVsZXRlKFtzZWxmLmZlZWRUb0RlbGV0ZS5pZF0pO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnZGVsZXRlTXVsdGlwbGVGZWVkcyc6XHJcblx0XHRcdFx0XHRzZWxmLmZlZWRBY3Rpb25EZWxldGUoc2VsZi5mZWVkc1NlbGVjdGVkKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ2JhY2tBbGxUb0ZlZWQnOlxyXG5cdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uID0gc2VsZi5idWlsZGVyVXJsO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZWxldGUgRmVlZFxyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0ZmVlZEFjdGlvbkRlbGV0ZSA6IGZ1bmN0aW9uKGZlZWRzX2lkcyl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRmZWVkc0RlbGV0ZURhdGEgPSB7XHJcblx0XHRcdFx0XHRhY3Rpb24gOiAnc2J5X2ZlZWRfc2F2ZXJfbWFuYWdlcl9kZWxldGVfZmVlZHMnLFxyXG5cdFx0XHRcdFx0ZmVlZHNfaWRzIDogZmVlZHNfaWRzXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0c2VsZi5hamF4UG9zdChmZWVkc0RlbGV0ZURhdGEsIGZ1bmN0aW9uKF9yZWYpe1xyXG5cdFx0XHRcdHZhciBkYXRhID0gX3JlZi5kYXRhO1xyXG5cdFx0XHRcdHNlbGYuZmVlZHNMaXN0ID0gT2JqZWN0LnZhbHVlcyhPYmplY3QuYXNzaWduKHt9LCBkYXRhKSk7XHJcblx0XHRcdFx0c2VsZi5mZWVkc1NlbGVjdGVkID0gW107XHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEVuYWJsZSAmIFNob3cgQ29sb3IgUGlja2VyXHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICovXHJcblx0XHRzaG93Q29sb3JQaWNrZXJQb3NwdXAgOiBmdW5jdGlvbihjb250cm9sSWQpe1xyXG5cdFx0XHR0aGlzLmN1c3RvbWl6ZXJTY3JlZW5zLmFjdGl2ZUNvbG9yUGlja2VyID0gY29udHJvbElkO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEhpZGUgQ29sb3IgUGlja2VyXHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICovXHJcblx0XHRoaWRlQ29sb3JQaWNrZXJQb3B1cCA6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHRoaXMuY3VzdG9taXplclNjcmVlbnMuYWN0aXZlQ29sb3JQaWNrZXIgPSBudWxsO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEdldCBGZWVkIFByZXZpZXcgR2xvYmFsIENTUyBDbGFzc1xyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqIEByZXR1cm4gU3RyaW5nXHJcblx0XHQgKi9cclxuXHRcdGdldFBhbGV0dGVDbGFzcyA6IGZ1bmN0aW9uKGNvbnRleHQgPSAnJyl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRjb2xvclBhbGV0dGUgPSBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5ncy5jb2xvcnBhbGV0dGU7XHJcblxyXG5cdFx0XHRpZihzZWxmLmNoZWNrTm90RW1wdHkoIGNvbG9yUGFsZXR0ZSApKXtcclxuXHRcdFx0XHR2YXIgZmVlZElEID0gY29sb3JQYWxldHRlID09PSAnY3VzdG9tJyAgPyAoJ18nICsgc2VsZi5jdXN0b21pemVyRmVlZERhdGEuZmVlZF9pbmZvLmlkKSAgOiAnJztcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhjb2xvclBhbGV0dGUgIT09ICdpbmhlcml0JyA/ICcgc2J5JyArIGNvbnRleHQgKyAnX3BhbGV0dGVfJyArIGNvbG9yUGFsZXR0ZSArIGZlZWRJRDogJycpO1xyXG5cdFx0XHRcdHJldHVybiBjb2xvclBhbGV0dGUgIT09ICdpbmhlcml0JyA/ICcgc2J5JyArIGNvbnRleHQgKyAnX3BhbGV0dGVfJyArIGNvbG9yUGFsZXR0ZSArIGZlZWRJRDogJyc7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIENoZWNrIGlmIFZhbHVlIGlzIEVtcHR5XHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gYm9vbGVhblxyXG5cdFx0ICovXHJcblx0XHRjaGVja05vdEVtcHR5IDogZnVuY3Rpb24odmFsdWUpe1xyXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS5yZXBsYWNlKC8gL2dpLCcnKSAhPSAnJztcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgZmVlZCBjb250YWluZXIgY2xhc3NcclxuXHRcdCAqXHJcblx0XHQgKiBAc2luY2UgMi4wXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybnMgc3RyaW5nXHJcblx0XHQgKi9cclxuXHRcdGdldEZlZWRDb250YWluZXJDbGFzc2VzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0bGV0IHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRsZXQgY2xhc3NlcyA9IFtcclxuXHRcdFx0XHQnc2JfeW91dHViZScsXHJcblx0XHRcdFx0J3NieV9sYXlvdXRfJyArIHNlbGYuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzLmxheW91dCxcclxuXHRcdFx0XHQnc2J5X2NvbF8nICsgc2VsZi5nZXRDb2xTZXR0aW5ncygpLFxyXG5cdFx0XHRcdCdzYnlfbW9iX2NvbF8nICsgc2VsZi5nZXRNb2JDb2xTZXR0aW5ncygpLFxyXG5cdFx0XHRcdCdzYnlfcGFsZXR0ZV8nICsgc2VsZi5nZXRDb2xvclBhbGV0dGVDbGFzcygpLFxyXG5cdFx0XHRdO1xyXG5cdFx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldENvbG9yUGFsZXR0ZUNsYXNzIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGxldCBzZWxmID0gdGhpcztcclxuXHRcdFx0aWYgKCBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5ncy5jb2xvcnBhbGV0dGUgPT0gJ2N1c3RvbScgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHNlbGYuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzLmNvbG9ycGFsZXR0ZSArICdfJyArIHNlbGYuY3VzdG9taXplckZlZWREYXRhLmZlZWRfaW5mby5pZDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3MuY29sb3JwYWxldHRlO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogR2V0IENvbCBTZXR0aW5nc1xyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0Z2V0Q29sU2V0dGluZ3M6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRsZXQgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHRpZiAoIHNlbGYuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzWydsYXlvdXQnXSA9PSAnbGlzdCcgfHwgc2VsZi5jdXN0b21pemVyU2NyZWVucy5wcmV2aWV3U2NyZWVuID09PSAnbW9iaWxlJyApIHtcclxuXHRcdFx0XHRyZXR1cm4gMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5nc1snY29scyddICkge1xyXG5cdFx0XHRcdHJldHVybiBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5nc1snY29scyddO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgTW9iIENvbCBTZXR0aW5nc1xyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0Z2V0TW9iQ29sU2V0dGluZ3M6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRsZXQgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHRpZiAoIHNlbGYuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzWydsYXlvdXQnXSA9PSAnbGlzdCcgKSB7XHJcblx0XHRcdFx0cmV0dXJuIDA7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5nc1snY29sc21vYmlsZSddICkge1xyXG5cdFx0XHRcdHJldHVybiBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5nc1snY29sc21vYmlsZSddO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDaGVjayBpZiBoZWFkZXIgc3Vic2NyaWJlcnMgbmVlZHMgdG8gc2hvd1xyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0Y2hlY2tTaG91bGRTaG93U3Vic2NyaWJlcnM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3Muc2hvd3N1YnNjcmliZSA9PSB0cnVlID8gXCJzaG93blwiIDogJyc7XHJcblx0XHR9LFxyXG5cclxuXHRcdHNob3VsZFNob3dJbmRpdmlkdWFsRWxlbWVudHM6IGZ1bmN0aW9uKCBwYXJhbSApIHtcclxuXHRcdFx0Y29uc29sZS5sb2cocGFyYW0pO1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdCRwYXJlbnQuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzLmluY2x1ZGUuaW5jbHVkZXMoJ2ljb24nKVxyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIENoZWNrIGlmIERhdGEgU2V0dGluZyBpcyBFbmFibGVkXHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gYm9vbGVhblxyXG5cdFx0ICovXHJcblx0XHR2YWx1ZUlzRW5hYmxlZCA6IGZ1bmN0aW9uKHZhbHVlKXtcclxuXHRcdFx0cmV0dXJuIHZhbHVlID09IDEgfHwgdmFsdWUgPT0gdHJ1ZSB8fCB2YWx1ZSA9PSAndHJ1ZScgfHwgdmFsdWUgPT0gJ29uJztcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly9DaGFuZ2UgU3dpdGNoZXIgU2V0dGluZ3NcclxuXHRcdGNoYW5nZVN3aXRjaGVyU2V0dGluZ1ZhbHVlIDogZnVuY3Rpb24oc2V0dGluZ0lELCBvblZhbHVlLCBvZmZWYWx1ZSwgYWpheEFjdGlvbiA9IGZhbHNlLCBleHRlbnNpb24pIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhleHRlbnNpb24pO1xyXG5cdFx0XHRpZiAoT2JqZWN0LmtleXMoc2VsZi5pbkFjdGl2ZUV4dGVuc2lvbnMpLmluY2x1ZGVzKHNldHRpbmdJRCkpIHtcclxuXHRcdFx0XHRzZWxmLnZpZXdzQWN0aXZlLmV4dGVuc2lvbnNQb3B1cEVsZW1lbnQgPSBzZWxmLmluQWN0aXZlRXh0ZW5zaW9uc1tzZXR0aW5nSURdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNlbGYuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzW3NldHRpbmdJRF0gPSBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5nc1tzZXR0aW5nSURdID09IG9uVmFsdWUgPyBvZmZWYWx1ZSA6IG9uVmFsdWU7XHJcblx0XHRcdGlmKGFqYXhBY3Rpb24gIT09IGZhbHNlKXtcclxuXHRcdFx0XHRzZWxmLmN1c3RvbWl6ZXJDb250cm9sQWpheEFjdGlvbihhamF4QWN0aW9uKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzZWxmLnJlZ2VuZXJhdGVMYXlvdXQoc2V0dGluZ0lEKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBQYXJzZSBKU09OXHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4ganNvbk9iamVjdCAvIEJvb2xlYW5cclxuXHRcdCAqL1xyXG5cdFx0anNvblBhcnNlIDogZnVuY3Rpb24oanNvblN0cmluZyl7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZyk7XHJcblx0XHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEdldCBjdXN0b20gaGVhZGVyIHRleHRcclxuXHRcdCAqXHJcblx0XHQgKiBAc2luY2UgMi4wXHJcblx0XHQgKi9cclxuXHRcdGdldEN1c3RvbUhlYWRlclRleHQgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzLmN1c3RvbWhlYWRlcnRleHQ7XHJcblx0XHR9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTaG91bGQgc2hvdyB0aGUgc3RhbmRhcmQgaGVhZGVyXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAc2luY2UgMi4wXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvdWxkU2hvd1N0YW5kYXJkSGVhZGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3Muc2hvd2hlYWRlciAmJiBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5ncy5oZWFkZXJzdHlsZSA9PT0gJ3N0YW5kYXJkJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTaG91bGQgc2hvdyB0aGUgdGV4dCBzdHlsZSBoZWFkZXJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBzaW5jZSAyLjBcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG91bGRTaG93VGV4dEhlYWRlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzLnNob3doZWFkZXIgJiYgc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3MuaGVhZGVyc3R5bGUgPT09ICd0ZXh0JztcclxuICAgICAgICB9LFxyXG5cclxuXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgZmxhZ3MgYXR0cmlidXRlc1xyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0Z2V0RmxhZ3NBdHRyIDogZnVuY3Rpb24oICkge1xyXG5cdFx0XHRsZXQgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0ZmxhZ3MgPSBbXTtcclxuXHJcblx0XHRcdGlmICggc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3NbJ2Rpc2FibGVfcmVzaXplJ10gKSB7XHJcblx0XHRcdFx0ZmxhZ3MucHVzaCgncmVzaXplRGlzYWJsZScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3NbJ2Zhdm9yX2xvY2FsJ10gKSB7XHJcblx0XHRcdFx0ZmxhZ3MucHVzaCgnZmF2b3JMb2NhbCcpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3NbJ2Rpc2FibGVfanNfaW1hZ2VfbG9hZGluZyddICkge1xyXG5cdFx0XHRcdGZsYWdzLnB1c2goJ2ltYWdlTG9hZERpc2FibGUnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIHNlbGYuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzWydhamF4X3Bvc3RfbG9hZCddICkge1xyXG5cdFx0XHRcdGZsYWdzLnB1c2goJ2FqYXhQb3N0TG9hZCcpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3NbJ3BsYXllcnJhdGlvJ10gPT09ICczOjQnICkge1xyXG5cdFx0XHRcdGZsYWdzLnB1c2goJ25hcnJvd1BsYXllcicpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3NbJ2Rpc2FibGVjZG4nXSApIHtcclxuXHRcdFx0XHRmbGFncy5wdXNoKCdkaXNhYmxlY2RuJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBmbGFncy50b1N0cmluZygpO1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2hvdWxkIHNob3cgZ2FsbGVyeSBsYXlvdXQgcGxheWVyXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAc2luY2UgMi4wXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvdWxkU2hvd1BsYXllciA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmICggc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3MubGF5b3V0ICE9ICdnYWxsZXJ5JyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cdFx0LyoqXHJcblx0XHQgKiBTaG91bGQgc2hvdyB0aGUgc3RhbmRhcmQgaGVhZGVyXHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICovXHJcblx0XHRzaG91bGRTaG93U3RhbmRhcmRIZWFkZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRsZXQgc2VsZiA9IHRoaXM7XHJcblx0XHRcdHJldHVybiBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5ncy5zaG93aGVhZGVyICYmIHNlbGYuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzLmhlYWRlcnN0eWxlID09PSAnc3RhbmRhcmQnO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFNob3VsZCBzaG93IHRoZSB0ZXh0IHN0eWxlIGhlYWRlclxyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0c2hvdWxkU2hvd1RleHRIZWFkZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRsZXQgc2VsZiA9IHRoaXM7XHJcblx0XHRcdHJldHVybiBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5ncy5zaG93aGVhZGVyICYmIHNlbGYuY3VzdG9taXplckZlZWREYXRhLnNldHRpbmdzLmhlYWRlcnN0eWxlID09PSAndGV4dCc7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogU3dpdGNoIHRvIFZpZGVvcyBzZWN0aW9uc1xyXG5cdFx0ICogRnJvbSBGZWVkIExheW91dCBzZWN0aW9uIGJvdHRvbSBsaW5rXHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICovXHJcblx0XHRzd2l0Y2hUb1ZpZGVvc1NlY3Rpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdHNlbGYuY3VzdG9taXplclNjcmVlbnMucGFyZW50QWN0aXZlU2VjdGlvbiA9IG51bGw7XHJcblx0XHRcdHNlbGYuY3VzdG9taXplclNjcmVlbnMucGFyZW50QWN0aXZlU2VjdGlvbkRhdGEgPSBudWxsO1xyXG5cdFx0XHRzZWxmLmN1c3RvbWl6ZXJTY3JlZW5zLmFjdGl2ZVNlY3Rpb24gPSAnY3VzdG9taXplX3ZpZGVvcyc7XHJcblx0XHRcdHNlbGYuY3VzdG9taXplclNjcmVlbnMuYWN0aXZlU2VjdGlvbkRhdGEgPSBzZWxmLmN1c3RvbWl6ZXJTaWRlYmFyQnVpbGRlci5jdXN0b21pemUuc2VjdGlvbnMuY3VzdG9taXplX3ZpZGVvcztcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTaG9ydGNvZGUgR2xvYmFsIExheW91dCBTZXR0aW5nc1xyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0c2V0U2hvcnRjb2RlR2xvYmFsU2V0dGluZ3MgOiBmdW5jdGlvbihmbHlQcmV2aWV3ID0gZmFsc2Upe1xyXG5cdFx0XHRsZXQgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0eW91dHViZUZlZWQgPSBqUXVlcnkoXCJodG1sXCIpLmZpbmQoXCIuc2JfeW91dHViZVwiKSxcclxuXHRcdFx0XHRmZWVkU2V0dGluZ3MgPSBzZWxmLmpzb25QYXJzZSh5b3V0dWJlRmVlZC5hdHRyKCdkYXRhLW9wdGlvbnMnKSksXHJcblx0XHRcdFx0Y3VzdG9taXplclNldHRpbmdzID0gc2VsZi5jdXN0b21pemVyRmVlZERhdGEuc2V0dGluZ3M7XHJcblxyXG5cdFx0XHRcdGlmICggIXlvdXR1YmVGZWVkLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdGlmKCBjdXN0b21pemVyU2V0dGluZ3MubGF5b3V0ID09PSAnY2Fyb3VzZWwnICl7XHJcblx0XHRcdFx0bGV0IGFycm93cyBcdFx0PSBzZWxmLnZhbHVlSXNFbmFibGVkKCBjdXN0b21pemVyU2V0dGluZ3NbJ2Nhcm91c2VsYXJyb3dzJ10gKSxcclxuXHRcdFx0XHRcdHBhZyBcdFx0PSBzZWxmLnZhbHVlSXNFbmFibGVkKCBjdXN0b21pemVyU2V0dGluZ3NbJ2Nhcm91c2VscGFnJ10gKSxcclxuXHRcdFx0XHRcdGF1dG9wbGF5IFx0PSBzZWxmLnZhbHVlSXNFbmFibGVkKCBjdXN0b21pemVyU2V0dGluZ3NbJ2Nhcm91c2VsYXV0b3BsYXknXSApLFxyXG5cdFx0XHRcdFx0dGltZSBcdFx0PSBhdXRvcGxheSA/IHBhcnNlSW50KGN1c3RvbWl6ZXJTZXR0aW5nc1snY2Fyb3VzZWx0aW1lJ10pIDogZmFsc2UsXHJcblx0XHRcdFx0XHRsb29wIFx0XHQ9IHNlbGYuY2hlY2tOb3RFbXB0eShjdXN0b21pemVyU2V0dGluZ3NbJ2Nhcm91c2VsbG9vcCddKSAmJiBjdXN0b21pemVyU2V0dGluZ3NbJ2Nhcm91c2VsbG9vcCddICE9PSAncmV3aW5kJyA/IGZhbHNlIDogdHJ1ZSxcclxuXHRcdFx0XHRcdHJvd3MgXHRcdD0gY3VzdG9taXplclNldHRpbmdzWydjYXJvdXNlbHJvd3MnXSAgPyBNYXRoLm1pbiggcGFyc2VJbnQoY3VzdG9taXplclNldHRpbmdzWydjYXJvdXNlbHJvd3MnXSksIDIpIDogMTtcclxuXHRcdFx0XHRkZWxldGUgZmVlZFNldHRpbmdzWydnYWxsZXJ5J107XHJcblx0XHRcdFx0ZGVsZXRlIGZlZWRTZXR0aW5nc1snbWFzb25yeSddO1xyXG5cdFx0XHRcdGRlbGV0ZSBmZWVkU2V0dGluZ3NbJ2dyaWQnXTtcclxuXHRcdFx0XHRmZWVkU2V0dGluZ3NbJ2Nhcm91c2VsJ10gPSBbYXJyb3dzLCBwYWcsIGF1dG9wbGF5LCB0aW1lLCBsb29wLCByb3dzXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKGN1c3RvbWl6ZXJTZXR0aW5ncy5sYXlvdXQgPT0gJ2dyaWQnKXtcclxuXHRcdFx0XHRkZWxldGUgZmVlZFNldHRpbmdzWydnYWxsZXJ5J107XHJcblx0XHRcdFx0ZGVsZXRlIGZlZWRTZXR0aW5nc1snbWFzb25yeSddO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoY3VzdG9taXplclNldHRpbmdzLmxheW91dCA9PSAnbWFzb25yeScpe1xyXG5cdFx0XHRcdGRlbGV0ZSBmZWVkU2V0dGluZ3NbJ2dhbGxlcnknXTtcclxuXHRcdFx0XHRkZWxldGUgZmVlZFNldHRpbmdzWydncmlkJ107XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZihjdXN0b21pemVyU2V0dGluZ3MubGF5b3V0ID09ICdnYWxsZXJ5Jyl7XHJcblx0XHRcdFx0ZGVsZXRlIGZlZWRTZXR0aW5nc1snbWFzb25yeSddO1xyXG5cdFx0XHRcdGRlbGV0ZSBmZWVkU2V0dGluZ3NbJ2dyaWQnXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoY3VzdG9taXplclNldHRpbmdzLmxheW91dCAhPT0gJ2Nhcm91c2VsJyl7XHJcblx0XHRcdFx0ZGVsZXRlIGZlZWRTZXR0aW5nc1snY2Fyb3VzZWwnXTtcclxuXHRcdFx0fVxyXG5cdFx0XHR5b3V0dWJlRmVlZC5hdHRyKFwiZGF0YS1vcHRpb25zXCIsIEpTT04uc3RyaW5naWZ5KGZlZWRTZXR0aW5ncykpO1xyXG5cclxuXHRcdFx0aWYgKCB0eXBlb2Ygd2luZG93LnNieV9pbml0ICE9PSAndW5kZWZpbmVkJyAmJiBmbHlQcmV2aWV3ICkge1xyXG5cdFx0XHRcdC8vc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdFx0XHRcdFx0d2luZG93LnNieV9pbml0KCk7XHJcblx0XHRcdFx0Ly99LCAyMDAwKVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogU2hvdWxkIHNob3cgZ2FsbGVyeSBsYXlvdXQgcGxheWVyXHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDIuMFxyXG5cdFx0ICovXHJcblx0XHRzaG91bGRTaG93UGxheWVyIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0aWYgKCBzZWxmLmN1c3RvbWl6ZXJGZWVkRGF0YS5zZXR0aW5ncy5sYXlvdXQgIT0gJ2dhbGxlcnknICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTaG91bGQgU2hvdyBNYW51YWwgQ29ubmVjdFxyXG5cdFx0ICogXHJcblx0XHQgKiBAc2luY2UgMi4wXHJcblx0XHQgKi9cclxuXHRcdHNob3dNYW51YWxDb25uZWN0IDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0c2VsZi5zaG91bGRTaG93TWFudWFsQ29ubmVjdCA9IHRydWU7XHJcblx0XHRcdHNlbGYuc2hvdWxkU2hvd0ZlZWRBUElCYWNrQnRuID0gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTaG91bGQgU2hvdyBNYW51YWwgQ29ubmVjdFxyXG5cdFx0ICogXHJcblx0XHQgKiBAc2luY2UgMi4wXHJcblx0XHQgKi9cclxuXHRcdHNob3dGZWVkU291cmNlTWFudWFsQ29ubmVjdCA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdHNlbGYudmlld3NBY3RpdmUuYWNjb3VudEFQSVBvcHVwID0gdHJ1ZTtcclxuXHRcdFx0c2VsZi5zaG91bGRTaG93TWFudWFsQ29ubmVjdCA9IHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogU2hvdyBBUEkgY29ubmVjdCBmb3JtIGluIGZlZWQgY3JlYXRpb24gZmxvd1xyXG5cdFx0ICovXHJcblx0XHRzaG93QVBJQ29ubmVjdEZvcm0gOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRzZWxmLnNob3VsZFNob3dGZWVkQVBJRm9ybSA9IHRydWU7XHJcblx0XHRcdHNlbGYuc2hvdWxkU2hvd0ZlZWRBUElCYWNrQnRuID0gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTaG93IEFQSSBjb25uZWN0IGZvcm0gaW4gZmVlZCBjcmVhdGlvbiBmbG93XHJcblx0XHQgKi9cclxuXHRcdGhpZGVBUElDb25uZWN0Rm9ybSA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdHNlbGYuc2hvdWxkU2hvd01hbnVhbENvbm5lY3QgPSBmYWxzZTtcclxuXHRcdFx0c2VsZi5zaG91bGRTaG93RmVlZEFQSUZvcm0gPSBmYWxzZTtcclxuXHRcdFx0c2VsZi5zaG91bGRTaG93RmVlZEFQSUJhY2tCdG4gPSBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWRkIEFQSSBLZXkgZnJvbSB0aGUgc2VsZWN0IGZlZWQgZmxvd1xyXG5cdFx0ICogXHJcblx0XHQgKiBAc2luY2UgMi4wXHJcblx0XHQgKi9cclxuXHRcdGFkZEFQSUtleSA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHRpZiAoICFzZWxmLnNlbGVjdGVkRmVlZE1vZGVsLmFwaUtleSApIHtcclxuXHRcdFx0XHRzZWxmLmFwaUtleUVycm9yID0gdHJ1ZTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRhZGRBUElLZXlEYXRhID0ge1xyXG5cdFx0XHRcdFx0YWN0aW9uIDogJ3NieV9hZGRfYXBpX2tleScsXHJcblx0XHRcdFx0XHRhcGkgOiBzZWxmLnNlbGVjdGVkRmVlZE1vZGVsLmFwaUtleVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdHNlbGYuYXBpS2V5QnRuTG9hZGVyID0gdHJ1ZTtcclxuXHRcdFx0c2VsZi5hamF4UG9zdChhZGRBUElLZXlEYXRhLCBmdW5jdGlvbihfcmVmKXtcclxuXHRcdFx0XHR2YXIgZGF0YSA9IF9yZWYuZGF0YTtcclxuXHRcdFx0XHRzZWxmLmFwaUtleUJ0bkxvYWRlciA9IGZhbHNlO1xyXG5cdFx0XHRcdHNlbGYuYXBpS2V5RXJyb3IgPSBmYWxzZTtcclxuXHRcdFx0XHRzZWxmLmFwaUtleVN0YXR1cyA9IHRydWU7XHJcblx0XHRcdFx0c2VsZi5hY3RpdmF0ZVZpZXcoJ2FjY291bnRBUElQb3B1cCcpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBZGQgQWNjZXNzIFRva29lbiBmcm9tIHRoZSBzZWxlY3QgZmVlZCBmbG93XHJcblx0XHQgKiBcclxuXHRcdCAqIEBzaW5jZSAyLjBcclxuXHRcdCAqL1xyXG5cdFx0YWRkQWNjZXNzVG9rZW4gOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0aWYgKCAhc2VsZi5zZWxlY3RlZEZlZWRNb2RlbC5hY2Nlc3NUb2tlbiApIHtcclxuXHRcdFx0XHRzZWxmLmFjY2Vzc1Rva2VuRXJyb3IgPSB0cnVlO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdGFkZEFQSUtleURhdGEgPSB7XHJcblx0XHRcdFx0XHRhY3Rpb24gOiAnc2J5X21hbnVhbF9hY2Nlc3NfdG9rZW4nLFxyXG5cdFx0XHRcdFx0c2J5X2FjY2Vzc190b2tlbiA6IHNlbGYuc2VsZWN0ZWRGZWVkTW9kZWwuYWNjZXNzVG9rZW5cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRzZWxmLmFwaUtleUJ0bkxvYWRlciA9IHRydWU7XHJcblx0XHRcdHNlbGYuYWpheFBvc3QoYWRkQVBJS2V5RGF0YSwgZnVuY3Rpb24oX3JlZil7XHJcblx0XHRcdFx0dmFyIGRhdGEgPSBfcmVmLmRhdGE7XHJcblx0XHRcdFx0c2VsZi5hcGlLZXlCdG5Mb2FkZXIgPSBmYWxzZTtcclxuXHRcdFx0XHRzZWxmLmFjY2Vzc1Rva2VuRXJyb3IgPSBmYWxzZTtcclxuXHRcdFx0XHRzZWxmLmFwaUtleVN0YXR1cyA9IHRydWU7XHJcblx0XHRcdFx0c2VsZi5hY3RpdmF0ZVZpZXcoJ2FjY291bnRBUElQb3B1cCcpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDcmVhdGUgJiBTdWJtaXQgTmV3IEZlZWRcclxuXHRcdCAqXHJcblx0XHQgKiBAc2luY2UgMi4wXHJcblx0XHQgKi9cclxuXHRcdHN1Ym1pdE5ld0ZlZWQgOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0bmV3RmVlZERhdGEgPSB7XHJcblx0XHRcdFx0XHRhY3Rpb24gOiAnc2J5X2ZlZWRfc2F2ZXJfbWFuYWdlcl9idWlsZGVyX3VwZGF0ZScsXHJcblx0XHRcdFx0XHRmZWVkdHlwZSA6IHNlbGYuc2VsZWN0ZWRGZWVkLFxyXG5cdFx0XHRcdFx0ZmVlZHRlbXBsYXRlIDogc2VsZi5zZWxlY3RlZEZlZWRUZW1wbGF0ZSxcclxuXHRcdFx0XHRcdHNlbGVjdGVkRmVlZE1vZGVsIDogc2VsZi5zZWxlY3RlZEZlZWRNb2RlbCxcclxuXHRcdFx0XHRcdG5ld19pbnNlcnQgOiAndHJ1ZScsXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0c2VsZi5mdWxsU2NyZWVuTG9hZGVyID0gdHJ1ZTtcclxuXHRcdFx0c2VsZi5hamF4UG9zdChuZXdGZWVkRGF0YSwgZnVuY3Rpb24oX3JlZil7XHJcblx0XHRcdFx0dmFyIGRhdGEgPSBfcmVmLmRhdGE7XHJcblx0XHRcdFx0aWYoZGF0YS5mZWVkX2lkICYmIGRhdGEuc3VjY2Vzcyl7XHJcblx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24gPSBzZWxmLmJ1aWxkZXJVcmwgKyAnJmZlZWRfaWQ9JyArIGRhdGEuZmVlZF9pZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHR9XHJcblx0cmVzb2x2ZShTQl9DdXN0b21pemVyKTtcclxufSk7Il0sIm5hbWVzIjpbIm5hbWVzcGFjZSIsImNvbnNvbGUiLCJlcnJvciIsInRlc3QiLCJob29rTmFtZSIsImhvb2tzIiwic3RvcmVLZXkiLCJjYWxsYmFjayIsInByaW9yaXR5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiaG9va3NTdG9yZSIsImhhbmRsZXIiLCJoYW5kbGVycyIsImkiLCJzcGxpY2UiLCJfX2N1cnJlbnQiLCJmb3JFYWNoIiwiaG9va0luZm8iLCJuYW1lIiwiY3VycmVudEluZGV4IiwicnVucyIsImRvQWN0aW9uIiwicmVtb3ZlQWxsIiwiaGFuZGxlcnNSZW1vdmVkIiwic29tZSIsImhvb2siLCJyZXR1cm5GaXJzdEFyZyIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwicHVzaCIsInJlc3VsdCIsImFwcGx5IiwicG9wIiwiX2hvb2tzU3RvcmUkX19jdXJyZW50IiwiX2hvb2tzU3RvcmUkX19jdXJyZW50MiIsIl9Ib29rcyIsImNvbnN0cnVjdG9yIiwidGhpcyIsImFjdGlvbnMiLCJPYmplY3QiLCJjcmVhdGUiLCJmaWx0ZXJzIiwiYWRkQWN0aW9uIiwiYWRkRmlsdGVyIiwicmVtb3ZlQWN0aW9uIiwicmVtb3ZlRmlsdGVyIiwiaGFzQWN0aW9uIiwiaGFzRmlsdGVyIiwicmVtb3ZlQWxsQWN0aW9ucyIsInJlbW92ZUFsbEZpbHRlcnMiLCJhcHBseUZpbHRlcnMiLCJjdXJyZW50QWN0aW9uIiwiY3VycmVudEZpbHRlciIsImRvaW5nQWN0aW9uIiwiZG9pbmdGaWx0ZXIiLCJkaWRBY3Rpb24iLCJkaWRGaWx0ZXIiLCJkZWZhdWx0SG9va3MiLCJTQl9DdXN0b21pemVyIiwiaW5pdFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImV4dHJhRGF0YSIsImFsbEZlZWRzU2NyZWVuIiwic2JjX2J1aWxkZXIiLCJmZWVkc0xpc3QiLCJmZWVkcyIsImxlZ2FjeUZlZWRzTGlzdCIsImxlZ2FjeUZlZWRzIiwidG9vbHRpcENvbnRlbnQiLCJmZWVkdHlwZXNUb29sdGlwQ29udGVudCIsImZlZWRTZXR0aW5nc0RvbU9wdGlvbnMiLCJzZWxlY3RlZEZlZWRNb2RlbCIsImNoYW5uZWwiLCJwcmVmaWxsZWRDaGFubmVsSWQiLCJwbGF5bGlzdCIsImZhdm9yaXRlcyIsInNlYXJjaCIsImxpdmUiLCJzaW5nbGUiLCJhcGlLZXkiLCJhY2Nlc3NUb2tlbiIsInlvdXR1YmVBY2NvdW50Q29ubmVjdFVSTCIsImRpc21pc3NMaXRlIiwieW91dHViZV9mZWVkX2Rpc21pc3NfbGl0ZSIsInNob3VsZFNob3dGZWVkQVBJRm9ybSIsInNob3VsZFNob3dNYW51YWxDb25uZWN0IiwiZXh0cmFNZXRob2RzIiwiY2hhbmdlU2V0dGluZ1ZhbHVlIiwic2V0dGluZ0lEIiwidmFsdWUiLCJkb1Byb2Nlc3MiLCJhamF4QWN0aW9uIiwic2VsZiIsImN1c3RvbWl6ZXJGZWVkRGF0YSIsInNldHRpbmdzIiwiY3VzdG9taXplckNvbnRyb2xBamF4QWN0aW9uIiwicmVnZW5lcmF0ZUxheW91dCIsImNoZWNrRXh0ZW5zaW9uQWN0aXZlIiwiZXh0ZW5zaW9uIiwiYWN0aXZlRXh0ZW5zaW9ucyIsInNob3VsZFNob3dPdmVybGF5IiwiY29udHJvbCIsInNieUlzUHJvIiwic2J5TGljZW5zZU5vdGljZUFjdGl2ZSIsImNoZWNrRXh0ZW5zaW9uUG9wdXAiLCJjb25kaXRpb24iLCJjaGVja0V4dGVuc2lvbiIsImNoZWNrRXh0ZW5zaW9uRGltbWVkIiwiY2hlY2tDb250cm9sQ29uZGl0aW9uIiwic2hvdWxkU2hvd1RvZ2dsZXNldENvdmVyIiwidG9nZ2xlIiwidG9nZ2xlc2V0RXh0UG9wdXAiLCJ2aWV3c0FjdGl2ZSIsImV4dGVuc2lvbnNQb3B1cEVsZW1lbnQiLCJpbmNsdWRlcyIsInNldFRpbWVvdXQiLCJzZXRTaG9ydGNvZGVHbG9iYWxTZXR0aW5ncyIsImJhY2tUb0FsbEZlZWRzIiwiSlNPTiIsInN0cmluZ2lmeSIsImN1c3RvbWl6ZXJGZWVkRGF0YUluaXRpYWwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImJ1aWxkZXJVcmwiLCJvcGVuRGlhbG9nQm94IiwidHlwZSIsImhlYWRpbmciLCJkaWFsb2dCb3hQb3B1cFNjcmVlbiIsImRlc2NyaXB0aW9uIiwiY3VzdG9tQnV0dG9ucyIsImZlZWRUb0RlbGV0ZSIsInJlcGxhY2UiLCJmZWVkX25hbWUiLCJkaWFsb2dCb3giLCJhY3RpdmUiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsImNvbmZpcm1EaWFsb2dBY3Rpb24iLCJmZWVkQWN0aW9uRGVsZXRlIiwiaWQiLCJmZWVkc1NlbGVjdGVkIiwiZmVlZHNfaWRzIiwiZmVlZHNEZWxldGVEYXRhIiwiYWN0aW9uIiwiYWpheFBvc3QiLCJfcmVmIiwiZGF0YSIsInZhbHVlcyIsImFzc2lnbiIsInNob3dDb2xvclBpY2tlclBvc3B1cCIsImNvbnRyb2xJZCIsImN1c3RvbWl6ZXJTY3JlZW5zIiwiYWN0aXZlQ29sb3JQaWNrZXIiLCJoaWRlQ29sb3JQaWNrZXJQb3B1cCIsImdldFBhbGV0dGVDbGFzcyIsImNvbnRleHQiLCJjb2xvclBhbGV0dGUiLCJjb2xvcnBhbGV0dGUiLCJjaGVja05vdEVtcHR5IiwiZmVlZElEIiwiZmVlZF9pbmZvIiwibG9nIiwiZ2V0RmVlZENvbnRhaW5lckNsYXNzZXMiLCJsYXlvdXQiLCJnZXRDb2xTZXR0aW5ncyIsImdldE1vYkNvbFNldHRpbmdzIiwiZ2V0Q29sb3JQYWxldHRlQ2xhc3MiLCJqb2luIiwicHJldmlld1NjcmVlbiIsImNoZWNrU2hvdWxkU2hvd1N1YnNjcmliZXJzIiwic2hvd3N1YnNjcmliZSIsInNob3VsZFNob3dJbmRpdmlkdWFsRWxlbWVudHMiLCJwYXJhbSIsInZhbHVlSXNFbmFibGVkIiwiY2hhbmdlU3dpdGNoZXJTZXR0aW5nVmFsdWUiLCJvblZhbHVlIiwib2ZmVmFsdWUiLCJrZXlzIiwiaW5BY3RpdmVFeHRlbnNpb25zIiwianNvblBhcnNlIiwianNvblN0cmluZyIsInBhcnNlIiwiZSIsImdldEN1c3RvbUhlYWRlclRleHQiLCJjdXN0b21oZWFkZXJ0ZXh0Iiwic2hvdWxkU2hvd1N0YW5kYXJkSGVhZGVyIiwic2hvd2hlYWRlciIsImhlYWRlcnN0eWxlIiwic2hvdWxkU2hvd1RleHRIZWFkZXIiLCJnZXRGbGFnc0F0dHIiLCJmbGFncyIsInRvU3RyaW5nIiwic2hvdWxkU2hvd1BsYXllciIsInBhcmVudEFjdGl2ZVNlY3Rpb24iLCJwYXJlbnRBY3RpdmVTZWN0aW9uRGF0YSIsImFjdGl2ZVNlY3Rpb24iLCJhY3RpdmVTZWN0aW9uRGF0YSIsImN1c3RvbWl6ZXJTaWRlYmFyQnVpbGRlciIsImN1c3RvbWl6ZSIsInNlY3Rpb25zIiwiY3VzdG9taXplX3ZpZGVvcyIsImZseVByZXZpZXciLCJ5b3V0dWJlRmVlZCIsImpRdWVyeSIsImZpbmQiLCJmZWVkU2V0dGluZ3MiLCJhdHRyIiwiY3VzdG9taXplclNldHRpbmdzIiwiYXJyb3dzIiwicGFnIiwiYXV0b3BsYXkiLCJ0aW1lIiwicGFyc2VJbnQiLCJsb29wIiwicm93cyIsIk1hdGgiLCJtaW4iLCJzYnlfaW5pdCIsInNob3VsZFNob3dGZWVkQVBJQmFja0J0biIsImFjY291bnRBUElQb3B1cCIsImFkZEFQSUtleURhdGEiLCJhcGkiLCJhcGlLZXlCdG5Mb2FkZXIiLCJhcGlLZXlFcnJvciIsImFwaUtleVN0YXR1cyIsImFjdGl2YXRlVmlldyIsInNieV9hY2Nlc3NfdG9rZW4iLCJhY2Nlc3NUb2tlbkVycm9yIiwibmV3RmVlZERhdGEiLCJmZWVkdHlwZSIsInNlbGVjdGVkRmVlZCIsImZlZWR0ZW1wbGF0ZSIsInNlbGVjdGVkRmVlZFRlbXBsYXRlIiwibmV3X2luc2VydCIsImZ1bGxTY3JlZW5Mb2FkZXIiLCJmZWVkX2lkIiwic3VjY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=